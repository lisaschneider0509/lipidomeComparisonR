#   par(usr = c(0, 1, 0, 1))
#   r <- round(cor(x, y, use = "pairwise.complete.obs", method = method), digits=2)
#   txt <- paste0("R = ", r)
#   text(0.5, 0.5, txt, cex = 1.5)
# }
#
# mypanel <- function(x, y){
#   points(x, y, pch = 20)
# }
#
# if(out_path != 1){
#   print(paste("Saving to ", out_path, "correlations.png"))
#   png(paste(plot_name, "_correlations.png", sep = ""))
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
#   dev.off()
# }
# else {
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
# }
}
#' @details A plot with one boxplot per group is generated for all variables of a data frame.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)
boxplot_by_factor <- function(input_df, factor, out_path = 1){
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
par(mfrow=c(3,3), cex.main = 1, cex.axis = 0.7)
for (i in 1:ncol(numeric_df)){
col_name <- colnames(input_df)[i]
boxplot(numeric_df[,i] ~ input_df[[factor]],
main = col_name,
xlab = NULL,
ylab = NULL)
}
}
if(out_path == 1){
func()
}
else{
pdf(paste(out_path, "_boxplot", ".pdf", sep = ""))
func()
dev.off()
}
}
#' Assess normality for each group
#'
#' @description `shapiro_by_factor` takes a data frame and applies the shapiro-wilk test
#' to every group and variable
#' @details Shapiro wilk test is applied to every group and variable of a data frame.
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)}
shapiro_by_factor <- function(input_df, factor, out_path = 1){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
}
#' Correlation plots
#'
#' @description `correlation_plot` calculates correlations of variables and displays them in a dotplot
#' @details A grid of dotplots displaying the correlations between the variables of a data frame is generated.
#' Use with less than 10 variables ideally.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param out_path optional string. Path to save correlation plot to png.
#' If out_path is empty the correlation plot is printed to the device.
#' @example
#' correlation_plot(iris)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' correlation_plot(iris, out_path = dir)
#' }
correlation_plot <- function(input_df, method = "spearman", out_path = 1){
out_name <- paste(out_path, "_correlations", ".png", sep = "")
func <- function(){
par(cex.main = 1, cex.axis = 0.8,
family = "sans", font = 1)
colour = viridis(n = 2)
pairs.panels(select_if(input_df, is.numeric),
method = method,
hist.col = colour[2], rug = FALSE,
density = TRUE,  lm = TRUE, ci = FALSE, col = colour[1],
ellipses = FALSE,
pch = 20, cex = 0.7,
cex.cor = 0.5, main = "Correlation plot")
}
if(out_path != 1){
print(paste("Saving to ", out_name, sep = ""))
png(out_name)
func()
dev.off()
func()
}
else{
func()
}
}
# panel.cor <- function(x, y){
#   usr <- par("usr"); on.exit(par(usr))
#   par(usr = c(0, 1, 0, 1))
#   r <- round(cor(x, y, use = "pairwise.complete.obs", method = method), digits=2)
#   txt <- paste0("R = ", r)
#   text(0.5, 0.5, txt, cex = 1.5)
# }
#
# mypanel <- function(x, y){
#   points(x, y, pch = 20)
# }
#
# if(out_path != 1){
#   print(paste("Saving to ", out_path, "correlations.png"))
#   png(paste(plot_name, "_correlations.png", sep = ""))
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
#   dev.off()
# }
# else {
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
# }
}
#' @details A plot with one boxplot per group is generated for all variables of a data frame.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)
boxplot_by_factor <- function(input_df, factor, out_path = 1){
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
for (i in 1:ncol(numeric_df)){
col_name <- colnames(input_df)[i]
boxplot(numeric_df[,i] ~ input_df[[factor]],
main = col_name,
xlab = NULL,
ylab = NULL)
}
}
if(out_path == 1){
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
}
else{
pdf(paste(out_path, "_boxplot", ".pdf", sep = ""))
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
dev.off()
}
}
#' Assess normality for each group
#'
#' @description `shapiro_by_factor` takes a data frame and applies the shapiro-wilk test
#' to every group and variable
#' @details Shapiro wilk test is applied to every group and variable of a data frame.
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)}
shapiro_by_factor <- function(input_df, factor, out_path = 1){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
}
#' Correlation plots
#'
#' @description `correlation_plot` calculates correlations of variables and displays them in a dotplot
#' @details A grid of dotplots displaying the correlations between the variables of a data frame is generated.
#' Use with less than 10 variables ideally.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param out_path optional string. Path to save correlation plot to png.
#' If out_path is empty the correlation plot is printed to the device.
#' @example
#' correlation_plot(iris)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' correlation_plot(iris, out_path = dir)
#' }
correlation_plot <- function(input_df, method = "spearman", out_path = 1){
out_name <- paste(out_path, "_correlations", ".png", sep = "")
func <- function(){
par(cex.main = 1, cex.axis = 0.8,
family = "sans", font = 1)
colour = viridis(n = 2)
pairs.panels(select_if(input_df, is.numeric),
method = method,
hist.col = colour[2], rug = FALSE,
density = TRUE,  lm = TRUE, ci = FALSE, col = colour[1],
ellipses = FALSE,
pch = 20, cex = 0.7,
cex.cor = 0.5, main = "Correlation plot")
}
if(out_path != 1){
print(paste("Saving to ", out_name, sep = ""))
png(out_name)
func()
dev.off()
func()
}
else{
func()
}
}
# panel.cor <- function(x, y){
#   usr <- par("usr"); on.exit(par(usr))
#   par(usr = c(0, 1, 0, 1))
#   r <- round(cor(x, y, use = "pairwise.complete.obs", method = method), digits=2)
#   txt <- paste0("R = ", r)
#   text(0.5, 0.5, txt, cex = 1.5)
# }
#
# mypanel <- function(x, y){
#   points(x, y, pch = 20)
# }
#
# if(out_path != 1){
#   print(paste("Saving to ", out_path, "correlations.png"))
#   png(paste(plot_name, "_correlations.png", sep = ""))
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
#   dev.off()
# }
# else {
#   pairs(dplyr::select_if(input_df, is.numeric),
#         lower.panel = mypanel,
#         upper.panel = panel.cor)
# }
}
#' Options: "pearson", "kendall", "spearman" (default).
#' @param out_path optional string. Path to save correlation plot to png.
#' If out_path is empty the correlation plot is printed to the device.
#' @example
#' correlation_plot(iris)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' correlation_plot(iris, out_path = dir)
#' }
correlation_plot <- function(input_df, method = "spearman", out_path = 1){
out_name <- paste(out_path, "_correlations", ".png", sep = "")
func <- function(){
par(cex.main = 1, cex.axis = 0.8,
family = "sans", font = 1)
colour = viridis(n = 2)
pairs.panels(select_if(input_df, is.numeric),
method = method,
hist.col = colour[2], rug = FALSE,
density = TRUE,  lm = TRUE, ci = FALSE, col = colour[1],
ellipses = FALSE,
pch = 20, cex = 0.7,
cex.cor = 0.5, main = "Correlation plot")
}
if(out_path != 1){
print(paste("Saving to ", out_name, sep = ""))
png(out_name)
func()
dev.off()
func()
}
else{
func()
}
}
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)}
shapiro_by_factor <- function(input_df, factor, out_path = 1){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
}
#' @details A plot with one boxplot per group is generated for all variables of a data frame.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)
boxplot_by_factor <- function(input_df, factor, out_path = 1){
}
#' @details A plot with one boxplot per group is generated for all variables of a data frame.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)}
boxplot_by_factor <- function(input_df, factor, out_path = 1){
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
for (i in 1:ncol(numeric_df)){
col_name <- colnames(input_df)[i]
boxplot(numeric_df[,i] ~ input_df[[factor]],
main = col_name,
xlab = NULL,
ylab = NULL)
}
}
if(out_path == 1){
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
}
else{
pdf(paste(out_path, "_boxplot", ".pdf", sep = ""))
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
dev.off()
}
}
boxplot_by_factor(iris, "Species", dir)}
boxplot_by_factor(iris, "Species", dir)
boxplot_by_factor(iris, "Species", dir)
dev.off()
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' histogram_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' histogram_by_factor(iris, "Species", dir)
#' }
histogram_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
hist(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8,
xlab = NULL)
lines(density(numeric_df[,j][input_df[[factor]] == levels[i]]))
lines(density(numeric_df[,j][input_df[[factor]] == levels[i]],
adjust = 1.5), lty = 2)
}
}
if(out_path == 1){
for (i in 1:length(levels)){
func()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_hist_", levels[i], ".pdf", sep = ""))
func()
dev.off()
}
}
}
histogram_by_factor(iris, "Species", dir)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' qqplot_by_factor(iris, "Species", dir)}
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])
}
}
if(out_path == 1){
for (i in 1:length(levels)){
func()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
# par(mfrow=c(3,3))
# for (j in 1:ncol(numeric_df)){
#   col_name <- colnames(numeric_df)[j]
#   qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
#          main = paste(col_name, levels[i], sep = " "),
#          cex.main = 0.8)
#   qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
func()
dev.off()
}
}
}
qqplot_by_factor(iris, "Species", dir)}
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/iris", sep = "")
qqplot_by_factor(iris, "Species", dir)}
qqplot_by_factor(iris, "Species", dir)
qqplot_by_factor(iris, "Species")
