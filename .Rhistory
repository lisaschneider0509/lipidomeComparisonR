par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
}
else{
print(paste("Saving to ", out_path, "_boxplot.pdf", sep = ""))
pdf(paste(out_path, "_boxplot.pdf", sep = ""))
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
dev.off()
}
}
boxplot_by_factor(meat_imputed, "Group")
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)
#' }
#'
boxplot_by_factor <- function(input_df, factor, out_path = "none"){
numeric_df <- dplyr::select_if(input_df, is.numeric)
numeric_df$factor <- input_df[[factor]]
print(colnames(numeric_df))
func <- function(){
for (i in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[i]
boxplot(numeric_df[,i] ~ input_df[[factor]],
main = col_name,
xlab = NULL,
ylab = NULL)
}
}
# func <- function(){
#   for (i in 1:ncol(numeric_df)){
#     col_name <- colnames(numeric_df)[i]
#     boxplot(numeric_df[,i] ~ input_df[[factor]],
#             main = col_name,
#             xlab = NULL,
#             ylab = NULL)
#   }
# }
if(out_path == "none"){
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
}
else{
print(paste("Saving to ", out_path, "_boxplot.pdf", sep = ""))
pdf(paste(out_path, "_boxplot.pdf", sep = ""))
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
dev.off()
}
}
boxplot_by_factor(meat_imputed, "Group")
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' boxplot_by_factor(iris, "Species")
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' boxplot_by_factor(iris, "Species", dir)
#' }
#'
boxplot_by_factor <- function(input_df, factor, out_path = "none"){
numeric_df <- dplyr::select_if(input_df, is.numeric)
func <- function(){
for (i in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[i]
boxplot(numeric_df[,i] ~ input_df[[factor]],
main = col_name,
xlab = NULL,
ylab = NULL)
}
}
if(out_path == "none"){
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
}
else{
print(paste("Saving to ", out_path, "_boxplot.pdf", sep = ""))
pdf(paste(out_path, "_boxplot.pdf", sep = ""))
par(mfrow=c(3,3),
cex.main = 1,
cex.axis = 0.7)
func()
dev.off()
}
}
boxplot_by_factor(iris, "Species")
boxplot_by_factor(meat_imputed, "Group")
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(impute)
library(imputeLCMD)
library(ggplot2)#, # plots
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
# library(psych) # for correlation plot
# library(gridExtra)
# library(devtools)
# library(ggfortify)
# library(factoextra)
# library(plotly) # interactive heatmap
# library(heatmaply) # interactive heatmap
# library(gplots) # heatmap
# library(dendextend)
# library(limma) # hypothesis testing
# library(ggrepel)
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
# axis.title = element_text(size = 10, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## meat data
### data processing
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
meat_data <- subset(meat_data, Status == "Processed")
meat_data[meat_data==''] <- NA
meat_data[meat_data=='N/F'] <- NA
meat_data$Area <- as.numeric(meat_data$Area)
meat_target <- subset(meat_data, Type == "Target Compound")
meat_standard <- subset(meat_data, Type == "Internal Standard")
meat_target <- flip_df(meat_target)
meat_target <- subset(meat_target, !is.na(Group))
meat_target$SID <- sub(".*probe","sample", meat_target$SID)
meat_target$SID <- sub("\\.*pos2","2", meat_target$SID)
meat_target$SID <- sub("\\.*pos","1", meat_target$SID)
meat_AS <- meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE]
meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE] <- sub(".*sample","AS_sample", meat_AS)
meat_N <- meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE]
meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE] <- sub(".*sample","N_sample", meat_N)
meat_target$SID <- str_remove(meat_target$SID, "_AS")
meta_info <- read.table(text = meat_target$SID, sep = "_")
colnames(meta_info) <- c("Treatment", "Sample_nr", "Biol_rep", "Tech_rep")
meta_info$Biol_rep <- paste(meta_info$Sample_nr, meta_info$Biol_rep, sep = "_")
meta_info$Tech_rep <- paste(meta_info$Biol_rep, meta_info$Tech_rep, sep = "_")
meat_target <- cbind(meat_target$SID, meta_info, meat_target[, -1])
colnames(meat_target) <- c("SID", colnames(meat_target[-1]))
meat_N <- subset(meat_target, Treatment == "N")
meat_AS <- subset(meat_target, Treatment == "AS")
### impute missing values
#### remove columns where all values are missing
impute_meat <- meat_N[, which(colMeans(!is.na(meat_N)) > 0.5)] #todo find out which percentage of missing values still works for imputation
impute_meat <- as.matrix(select_if(impute_meat, is.numeric))
# perform missing data imputation
meat_QRILC = impute.QRILC(impute_meat)
meat_imputed <- as.data.frame(meat_QRILC[[1]])
meat_imputed <- cbind(meat_N[, 1:6], meat_imputed)
meat_imputed <- droplevels(meat_imputed) # remove unused levels from factors
meat_groups <- generate_categorical_table(meat_imputed$Group)
meat_treatment <- generate_categorical_table(meat_imputed$Treatment)
meat_numeric <- meat_imputed
meat_numeric$Group <- as.numeric(meat_numeric$Group)
meat_biol <- calc_by_replicate(meat_numeric, meat_numeric$Sample_nr, mean)
meat_tech <- calc_by_replicate(meat_numeric, meat_numeric$Biol_rep, mean)
nmb <- paste_catecorical_variable(meat_biol, 2, meat_groups)
nmt <- paste_catecorical_variable(meat_tech, 2, meat_groups)
### exploratory data analysis
qqplot_by_factor(meat_imputed, "Group")
histogram_by_factor(meat_imputed, "Group")
boxplot_by_factor(meat_imputed, "Group")
### exploratory data analysis
qqplot_by_factor(meat_imputed, "Group", out_path = plot_path)
histogram_by_factor(meat_imputed, "Group", out_path = plot_path)
boxplot_by_factor(meat_imputed, "Group", out_path = plot_path)
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
### exploratory data analysis
qqplot_by_factor(meat_imputed, "Group", out_path = plot_name)
histogram_by_factor(meat_imputed, "Group", out_path = plot_name)
boxplot_by_factor(meat_imputed, "Group", out_path = plot_name)
parallel_plot(meat_imputed, meat_imputed$Group, out_path = plot_name)
meat_spider <- calc_by_replicate(meat_imputed, meat_imputed$Group, mean)
spider_chart(meat_spider, legend_lab = meat_spider$Group.1, out_path = put_name)
spider_chart(meat_spider, legend_lab = meat_spider$Group.1, out_path = out_name)
spider_chart(meat_spider, legend_lab = meat_spider$Group.1, out_path = plot_name)
correlation_heatmap(meat_imputed, out_path = plot_name)
correlation_heatmap(meat_imputed, interactive = TRUE, out_path = plot_name)
shapiro_by_factor(meat_imputed, meat_imputed$Group)
shapiro_by_factor(iris, iris$Species)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
#' }
shapiro_by_factor <- function(input_df, factor, out_path = "none"){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
shapiro_all
# DT::datatable(shapiro_all)
}
shapiro_by_factor(iris, iris$Species)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
#' }
shapiro_by_factor <- function(input_df, factor, out_path = "none"){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
shapiro_pvalue
}
shapiro_by_factor(iris, iris$Species)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
#' }
shapiro_by_factor <- function(input_df, factor, out_path = "none"){
# shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
#                                by = list(factor),
#                                FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
#
# shapiro_statistic <- tibble::add_column(shapiro_statistic,
#                                         value = "W",
#                                         .before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
# shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
#                                      value = "p-Value",
#                                      .before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
shapiro_pvalue
}
shapiro_by_factor(iris, iris$Species)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
#' }
shapiro_by_factor <- function(input_df, factor, out_path = "none"){
# shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
#                                by = list(factor),
#                                FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
#
# shapiro_statistic <- tibble::add_column(shapiro_statistic,
#                                         value = "W",
#                                         .before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
# shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
#                                      value = "p-Value",
#                                      .before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
print("p < 0.05 ... no normal distribution; p > 0.05 ... normal distribution")
shapiro_pvalue
}
shapiro_by_factor(iris, iris$Species)
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @param normality_test function. Test for normality c(shapiro.test (default), ks.test)
#' @example
#' normality_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' normality_by_factor(iris, "Species", dir)
#' }
normality_by_factor <- function(input_df, factor, out_path = "none", normality_test = shapiro.test){
# shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
#                                by = list(factor),
#                                FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
#
# shapiro_statistic <- tibble::add_column(shapiro_statistic,
#                                         value = "W",
#                                         .before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
# shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
#                                      value = "p-Value",
#                                      .before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
print("p < 0.05 ... no normal distribution; p > 0.05 ... normal distribution")
shapiro_pvalue
}
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @param normality_test function. Test for normality c(shapiro.test (default), ks.test)
#' @example
#' normality_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' normality_by_factor(iris, "Species", dir)
#' }
normality_by_factor <- function(input_df, factor, out_path = "none", normality_test = shapiro.test){
# shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
#                                by = list(factor),
#                                FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
#
# shapiro_statistic <- tibble::add_column(shapiro_statistic,
#                                         value = "W",
#                                         .before = 1)
normality_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- normality_test(x); c(y$p.value)})
# shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
#                                      value = "p-Value",
#                                      .before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(normality_pvalue, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
print("p < 0.05 ... no normal distribution; p > 0.05 ... normal distribution")
normality_pvalue
}
normality_by_factor(iris, iris$Species)
normality_by_factor(iris, iris$Species, normality_test = ks.test)
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, iris$Species)
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
#' }
shapiro_by_factor <- function(input_df, factor, out_path = "none"){
# shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
#                                by = list(factor),
#                                FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
#
# shapiro_statistic <- tibble::add_column(shapiro_statistic,
#                                         value = "W",
#                                         .before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(factor),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
# shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
#                                      value = "p-Value",
#                                      .before = 1)
# shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
# shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path != "none"){
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
# shapiro_all
# DT::datatable(shapiro_all)
print("p < 0.05 ... no normal distribution; p > 0.05 ... normal distribution")
shapiro_pvalue
}
shapiro_by_factor(iris, iris$Species)
shapiro_by_factor(meat_imputed, meat_imputed$Group)
#' Correlation table
#'
#' @description `correlation_table` calculates the correlations between all numeric variables of a data frame and returns a table of r-values.
#'
correlation_table <- function(input_df, method = "spearman"){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
cor_matrix
}
correlation_table(iris)
correlation_table(iris$Species)
correlation_table(iris$Species[iris$Species == "setosa"])
iris$Species
iris[iris$Species == "setosa"]
iris[iris$Species == "setosa", ]
correlation_table(iris[iris$Species == "setosa", ])
correaltion_table(iris[iris$Species == "setosa", ], method = "kendall")
#' Correlation table
#'
#' @description `correlation_table` calculates the correlations between all numeric variables of a data frame and returns a table of r-values.
#' @param input_df data frame or subset of data frame.
#' @param method character string. "pearson", "kendall", or "spearman" (default). Can be abbreviated.
#' @examples
#' correalation_table(iris)
#' correaltion_table(iris[iris$Species == "setosa", ], method = "kendall")
correlation_table <- function(input_df, method = "spearman"){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
cor_matrix
}
correaltion_table(iris[iris$Species == "setosa", ], method = "kendall")
correlation_table(iris)
correlation_table(iris[iris$Species == "setosa", ], method = "kendall")
correlation_table(iris[iris$Species == "setosa", ], method = "p")
shapiro_by_factor(meat_imputed, meat_imputed$Group)
meat_fish_normality <- shapiro_by_factor(meat_imputed, meat_imputed$Group)
meat_correlation <- correlation_table(meat_imputed[meat_imputed$Group == "fleisch"])
meat_correlation
correlation_table(iris)
meat_correlation <- correlation_table(meat_imputed[meat_imputed$Group == "fleisch", ])
meat_correlation
head(meat_correlation)
game_correlation <- correlation_table(meat_imputed[meat_imputed$Group == "wild", ])
meat_correlation <- correlation_table(meat_imputed)
meat_correlation
correlation_heatmap(meat_imputed, interactive = TRUE, out_path = plot_name)
### test for correlation
meat_correlation <- cor(select_if(meat_imputed, is.numeric), method = "spearman")
