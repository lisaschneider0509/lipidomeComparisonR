theme(legend.position = "none")
if(is.character(fill)){
simple_barchart <- simple_barchart + geom_bar(stat="identity", fill = fill)
}
simple_barchart
}
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1)),
title = my_ratio_list[[i]]$lipids
)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1)),
xlab = my_ratio_list[[i]]$lipids
)
#' @param data_frame data frame with at least one numeric and one factor column
#' @param x vector. Factor column
#' @param y vector. Numeric column
#' @param fill vector. Factor column to fill bars by. By default all bars are blue.
#' @param title string. Main title of the plot. Default = ""
#' @param xlab string. Title of x-axis. Default = ""
#' @param ylab string. Title of y-axis. Default = ""
#' @example
#' iris_table <- reshape::melt(table(iris$Species))
#' simple_barchart(iris_table, x = iris_table$Var.1, y = iris_table$value, fill = "#35608DFF")
simple_barchart <- function(data_frame, x, y, fill = "#35608DFF",
title = "test", xlab = "", ylab = ""){
simple_barchart <- ggplot(data_frame, aes(x=x, y=y, fill=fill)) +
geom_bar(stat="identity") +
labs(title = title,
x = xlab,
y = ylab) +
scale_fill_viridis_d() +
theme(legend.position = "none")
if(is.character(fill)){
simple_barchart <- simple_barchart + geom_bar(stat="identity", fill = fill)
}
simple_barchart
}
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1)),
xlab = my_ratio_list[[i]]$lipids
)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1))
)
ratio_barcharts[[1]]
simple_barchart(my_ratio_list[[3]],
x = my_ratio_list[[3]]$L1,
y = my_ratio_list[[3]]$value,
title = my_ratio_list[[3]]$lipids)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids)
)
ratio_barcharts[[1]]
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts[[1]]
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
}
ratio_lipids <- colnames(meat_group_means[1:10])
ratio_lipids
ratio_lipids <- colnames(meat_group_means[1:10])
plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
x
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(impute)
library(imputeLCMD)
library(ggplot2)#, # plots
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel)
library(factoextra)
library(ggfortify) # biplot with ggplot
library(corrplot)
library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
# library(psych) # for correlation plot
# library(gridExtra)
# library(devtools)
# library(dendextend)
# library(limma) # hypothesis testing
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
## meat data
### data processing
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
meat_data <- subset(meat_data, Status == "Processed")
# meat_data[meat_data==''] <- NA
meat_data[meat_data=='N/F'] <- NA
meat_data$Area <- as.numeric(meat_data$Area)
meat_target <- subset(meat_data, Type == "Target Compound")
meat_standard <- subset(meat_data, Type == "Internal Standard")
meat_target <- flip_df(meat_target)
meat_target$SID <- sub(".*probe","sample", meat_target$SID)
meat_target$SID <- sub("\\.*pos2","2", meat_target$SID)
meat_target$SID <- sub("\\.*pos","1", meat_target$SID)
meat_target <- subset(meat_target, str_detect(meat_target$SID, "sample") == TRUE)
meat_AS <- meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE]
meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE] <- sub(".*sample","AS_sample", meat_AS)
meat_N <- meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE]
meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE] <- sub(".*sample","N_sample", meat_N)
meat_target$SID <- str_remove(meat_target$SID, "_AS")
meta_info <- read.table(text = meat_target$SID, sep = "_")
colnames(meta_info) <- c("Treatment", "Sample_nr", "Biol_rep", "Tech_rep")
meta_info$Biol_rep <- paste(meta_info$Sample_nr, meta_info$Biol_rep, sep = "_")
meta_info$Tech_rep <- paste(meta_info$Biol_rep, meta_info$Tech_rep, sep = "_")
meat_target <- cbind(meat_target$SID, meta_info, meat_target[, -1])
meat_target <- droplevels(meat_target)
map <- data.frame(Sample_nr=c("sample1","sample2","sample3", "sample4", "sample5", "sample6", "sample7"),
Group_new=c("beef", "beef", "beef", "game", "game", "fish", "beef"))
meat_target <- left_join(meat_target, map, by="Sample_nr")
meat_target$Group <- meat_target$Group_new
meat_target <- meat_target[-ncol(meat_target)]
# levels(meat_target$Group)[levels(meat_target$Group) == "fleisch"] <- "meat"
# levels(meat_target$Group)[levels(meat_target$Group) == "wild"] <- "game"
# levels(meat_target$Group)[levels(meat_target$Group) == "FISCH"] <- "fish"
# colnames(meat_target) <- c("SID", colnames(meat_target[-1]))
# meat_N <- subset(meat_target, Treatment == "N")
# meat_AS <- subset(meat_target, Treatment == "AS")
meat_data <- meat_target
## Exploratory data analysis
### impute missing values #todo find option to avoid imputation of negative values
#### remove columns where all values are missing
impute_meat <- meat_data[, which(colMeans(!is.na(meat_data)) > 0.8)]
impute_meat <- as.matrix(select_if(impute_meat, is.numeric))
#### perform missing data imputation
# meat_imputed <- as.data.frame(impute.QRILC(impute_meat, tune.sigma = 1)[[1]])
meat_imputed <- as.data.frame(impute.MinDet(impute_meat))
meat_imputed <- cbind(meat_data[, 1:6], meat_imputed)
meat_imputed <- droplevels(meat_imputed) # remove unused levels from factors
#### calculate the means for the replicates
meat_groups <- generate_categorical_table(meat_imputed$Group)
meat_numeric <- meat_imputed
meat_numeric$Sample_nr <- as.numeric(meat_numeric$Sample_nr)
meat_numeric$Group <- as.numeric(meat_numeric$Group)
# meat_by_sample <- calc_by_replicate(meat_numeric, meat_numeric$Sample_nr, mean)
meat_by_replicate <- calc_by_replicate(meat_numeric, meat_numeric$Biol_rep, mean)
meat_data <- paste_catecorical_variable(meat_by_replicate, 3, meat_groups)
colnames(meat_data)[1] <- "Bio_replicate"
meat_data$Sample_nr <- paste("sample", meat_data$Sample_nr, sep = "")
### graphical exploratory data analysis
# qqplot_by_factor(meat_data, "Group", out_path = plot_name)
# histogram_by_factor(meat_data, "Group", out_path = plot_name)
# boxplot_by_factor(meat_data, "Group", out_path = plot_name)
#
# parallel_plot(meat_data, meat_data$Group, out_path = plot_name)
# meat_spider <- calc_by_replicate(meat_data, meat_data$Group, mean)
# spider_chart(meat_spider, legend_lab = meat_spider$Group.1, out_path = plot_name)
### test for normality
meat_normality <- shapiro_by_factor(meat_data, meat_data$Group)
### test for correlation
meat_correlation <- cor(select_if(meat_data, is.numeric), method = "spearman")
matrix_heatmap(meat_correlation, title = "Correlation heatmap", interactive = FALSE)
### lipid ratios
meat_sample_means <- calc_by_replicate(meat_data, factor = meat_data$Sample_nr, mean)
meat_group_means <- calc_by_replicate(meat_data, factor = meat_data$Group, mean)
## ratio heatmap
{
# ratio matrix
ratio_list <- lapply(1:nrow(meat_group_means),
function(i) calculate_ratio_matrix(as.numeric(meat_group_means[i, -1]),
names_vector = colnames(meat_group_means[-1])))
names(ratio_list) <- as.character(meat_group_means$Group.1)
# save ratio matrixes to csv
lapply(1:length(ratio_list),
function(i) write.csv(ratio_list[[i]],
file = paste("output/ratio_matrix_",
names(ratio_list[i]), ".csv",
sep = ""),
row.names = TRUE))
# ratio heatmap
heatmap_list <- lapply(1:length(ratio_list),
function(i) matrix_heatmap(ratio_list[[i]],
title = names(ratio_list)[i],
interactive = TRUE))
names(heatmap_list) <- names(ratio_list)
# ratio heatmap html
lapply(1:length(heatmap_list),
function(i) saveWidget(heatmap_list[[i]],
file = paste(plot_path,
"/ratio_heatmap_",
names(heatmap_list)[i],
".html", sep = "")))
# ratio heatmaps arranged
arranged_ratio_heatmaps <- ggarrange(plotlist = heatmap_list,
ncol = 2,
nrow = 4,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "right")
arranged_ratio_heatmaps <- annotate_figure(arranged_ratio_heatmaps,
top = text_grob("Lipid ratios per sample",
size = 16, family = "AvantGarde"))
# save ratio heatmaps
ggsave(filename = paste(plot_name, "/ratio_heatmap.png", sep = ""),
plot = arranged_ratio_heatmaps, width = 8, height = 12)
}
# ratio barplots
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
x
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
print(mysubset)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
print(myratios)
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(my_ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$lipids,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
length(x)
x
plot_ratio_barcharts <- function(data_frame, subset_vector, group_column){
mysubset <- subset(data_frame, select = subset_vector)
myratios <- lapply(1:nrow(mysubset),
function(i) calculate_ratio_matrix(as.numeric(mysubset[i, -1]),
names_vector = colnames(mysubset[-1])))
names(myratios) <- as.character(mysubset[[group_column]])
myratios <- reshape::melt(myratios)
myratios$ratio_name <- as.factor(paste(myratios$X1, "/", myratios$X2))
myratios <- myratios[-(1:2)]
my_ratio_list <- lapply(1:length(levels(myratios$ratio_name)),
function(i) subset(myratios, myratios$ratio_name == levels(myratios$ratio_name)[i]))
names(my_ratio_list) <- levels(myratios$ratio_name)
ratio_barcharts <- lapply(1:length(my_ratio_list),
function(i) simple_barchart(my_ratio_list[[i]],
x = my_ratio_list[[i]]$L1,
y = my_ratio_list[[i]]$value,
fill = as.factor(my_ratio_list[[i]]$L1),
title = my_ratio_list[[i]]$ratio_name,
xlab = "group",
ylab = "ratio"))
ratio_barcharts
}
ratio_lipids <- colnames(meat_group_means[1:10])
ratio_lipids <- colnames(meat_group_means[c(1, 4:6)])
ratio_lipids
ratio_lipids <- colnames(meat_group_means[c(1, 4:6)])
x <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
x
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregate(iris, by = iris$Species)
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregate(iris, by = iris$Species, FUN = mean)
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregate(iris, by = as.list(iris$Species), FUN = mean)
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregate(iris, by = list(iris$Species), FUN = mean)
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregate(iris[-5], by = list(iris$Species), FUN = mean)
#' Plot ratio barcharts
#' @description `plot_ratio_barcharts` plots the ratios of a list of values from a data frame by group.
#' @param data_frame data frame. From aggregate() function.
#' @param subset_vector vector of column names from the data_frame.
#' @param grop_column string. Name of the column to group by.
#' @example
aggregated_iris <- aggregate(iris[-5], by = list(iris$Species), FUN = mean)
plot_ratio_barcharts(aggregated_iris, c("Group.1", "Sepal.Length", "Sepal.Width", "Petal.Length"), group_column = "Group.1")
arranged_barcharts <- ggarrange(plotlist = barchart_list,
ncol = 2,
nrow = 4,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "right")
# ratio barplots
ratio_lipids <- colnames(meat_group_means[c(1, 4:6)])
barchart_list <- plot_ratio_barcharts(meat_group_means, ratio_lipids, ratio_lipids[1])
arranged_barcharts <- ggarrange(plotlist = barchart_list,
ncol = 2,
nrow = 4,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "right")
arranged_barcharts
length(barchart_list)
arranged_barcharts <- ggarrange(plotlist = barchart_list,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "right")
arranged_barcharts
arranged_barcharts <- ggarrange(plotlist = barchart_list,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "none")
arranged_barcharts <- ggarrange(plotlist = barchart_list,
align = "h",
widths = c(0.9, 0.9),
common.legend = FALSE,
legend = "none")
arranged_barcharts <- ggarrange(plotlist = barchart_list,
align = "h",
widths = c(0.9, 0.9),
common.legend = TRUE,
legend = "none")
arranged_barcharts
