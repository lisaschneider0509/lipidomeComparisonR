scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.8,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
# print_or_save(out_path, func)
}
hclust_heatmap(wd)
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.8,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
# print_or_save(out_path, func)
}
hclust_heatmap(wd)
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
# print_or_save(out_path, func)
}
hclust_heatmap(wd)
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
# func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
print_or_save(out_path, func)
}
hclust_heatmap(wd)
hclust_heatmap(wd)
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/wd", sep = "")
hclust_heatmap(wd, out_path = dir)
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
# func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
print_or_save(out_path, func)
}
hclust_heatmap(wd, out_path = dir)
print_or_save <- function(out_name, func){
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
# func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
print_or_save(out_name, func)
}
hclust_heatmap(wd, out_path = dir)
print_or_save <- function(out_path, out_name, func){
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
# func()
## print to device or save to png
# if(out_path != "none"){
#   print(paste("Saving to ", out_name))
#   png(filename = out_name)
#   func()
#   dev.off()
# }
# else{
#   func()
# }
print_or_save(out_path, out_name, func)
}
hclust_heatmap(wd, out_path = dir)
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(as.matrix(input_df),
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap(wd, out_path = dir)
hclust_heatmap(wd)
hclust_heatmap(working_data, "treatment")
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(input_matrix,
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap(working_data, "treatment")
hclust_heatmap(iris)
hclust_heatmap(iris, "Species)
hclust_heatmap(mtcars)
""
"
hclust_heatmap(mtcars)
#' Hierarchical clustering heatmap
#'
#' @description `hclust_heatmap` takes a data frame and prints a heatmap from hierarchical clustering of the numeric variables
#' @details This function takes a data frame and transforms it into a matrix.
#' The given matrix is then used to print a heatmap with hierarchical clustering. The
#' @examples
#' hclust_heatmap(mtcars)
#' hclust_heatmap(iris, "Species")
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(input_matrix,
scale = "column", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap(mtcars)
mtcars
#' Hierarchical clustering heatmap
#'
#' @description `hclust_heatmap` takes a data frame and prints a heatmap from hierarchical clustering of the numeric variables
#' @details This function takes a data frame and transforms it into a matrix.
#' The given matrix is then used to print a heatmap with hierarchical clustering. The
#' @examples
#' hclust_heatmap(mtcars)
#' hclust_heatmap(iris, "Species")
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(input_matrix,
scale = "none", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap(mtcars)
#' Hierarchical clustering heatmap
#'
#' @description `hclust_heatmap` takes a data frame and prints a heatmap from hierarchical clustering of the numeric variables
#' @details This function takes a data frame and transforms it into a matrix.
#' The given matrix is then used to print a heatmap with hierarchical clustering. The
#' @examples
#' hclust_heatmap(mtcars)
#' hclust_heatmap(iris, "Species")
hclust_heatmap <- function(input_df,
set_rownames = "none",
out_path = "none"){
input_matrix <- as.matrix(dplyr::select_if(input_df, is.numeric))
out_name <- paste(out_path, "_hierarchical_heatmap", ".png", sep = "")
if(set_rownames != "none"){
rownames(input_matrix) <- input_df[[set_rownames]]
}
func <- function(){
par(mfrow = c(1, 1), cex.main = 0.8, cex.lab = 0.8)
gplots::heatmap.2(input_matrix,
scale = "row", # = c("none","row", "column")
## general apperance
trace = "none",
density.info = "none",
col = viridis::viridis_pal(),
margins = c(5, 8),
## dendrogram and labels
cexRow = 0.6,
cexCol = 0.7,
offsetRow = 0,
offsetCol = 0,
## other labels
main = mytitle)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
hclust_heatmap(mtcars)
nrow(mtcars)
hclust_heatmap(mtcars[1:32])
head(mtcars)
USArrests
hclust_heatmap(USArrests)
USArrests
nrow(USArrests)
t(USArrests)
hclust_heatmap(t(USArrests))
hclust_heatmap(t(USArrests))
hclust_heatmap(transpose(USArrests))
hclust_heatmap(USArrests)
