DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv"))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv"))
}
}
shapiro_by_factor(iris, "Species", dir)
shapiro_by_factor(iris, "Species", dir)
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#'
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/example/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
shapiro_by_factor <- function(input_df, factor, out_path = 1){
print(out_path)
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv"))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv"))
}
}
shapiro_by_factor(iris, "Species", dir)
dir
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/example/iris", sep = "")
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#'
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/example/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
shapiro_by_factor <- function(input_df, factor, out_path = 1){
print(out_path)
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv"))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv"))
}
}
shapiro_by_factor(iris, "Species", dir)
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/example/iris", sep = "")
shapiro_by_factor(iris, "Species", dir)
dir <- paste(getwd(), "/example/iris", sep = "")
shapiro_by_factor(iris, "Species", dir)
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/iris", sep = "")
shapiro_by_factor(iris, "Species", dir)
{dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#'
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
shapiro_by_factor <- function(input_df, factor, out_path = 1){
print(out_path)
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
}
}
#' The results are aggregated and printed in a table.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' @example
#' shapiro_by_factor(iris, "Species")
#'
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' shapiro_by_factor(iris, "Species", dir)
shapiro_by_factor <- function(input_df, factor, out_path = 1){
print(out_path)
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all <- shapiro_all[order(shapiro_all[,2]), ]
if(out_path == 1){
DT::datatable(shapiro_all)
} else {
DT::datatable(shapiro_all)
print(paste("Writing to", out_path, "_shapiro.csv", sep = ""))
write.csv(shapiro_all, paste(out_path, "_shapiro.csv", sep = ""))
}
}
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/iris", sep = "")
shapiro_by_factor(iris, "Species", dir)
#' Correlation heatmap
#'
correlation_heatmap <- function(input_df, method = "spearman", interactive = FALSE){
cor_matrix <- cor(select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
# melted_cor_matrix$X1 <- substring(melted_cor_matrix$X1, first = 1, last = 10)
# melted_cor_matrix$X2 <- substring(melted_cor_matrix$X2, first = 1, last = 10)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
#' Correlation heatmap
#'
#' @description `correlation_heatmap` calculates correlations of variables and displays them in a heatmap
#' @details A heatmap displaying the correlations between the variables of a data frame is generated.
#' The heatmap is optionally interative.
#' @param input_df a data frame
#' @param method c("pearson", "kendall", "spearman")
correlation_heatmap <- function(input_df, method = c("pearson", "kendall", "spearman"), interactive = FALSE){
cor_matrix <- cor(select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
# melted_cor_matrix$X1 <- substring(melted_cor_matrix$X1, first = 1, last = 10)
# melted_cor_matrix$X2 <- substring(melted_cor_matrix$X2, first = 1, last = 10)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
correlation_heatmap(iris)
correlation_heatmap(iris, interactive = TRUE)
#' The heatmap is optionally interative.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param interactive logical. Print heatmap to device (FALSE, default)
#' or open interactive heatmap in browser (TRUE).
#' @param out_path string. Path to save heatmap to png.
#' If out_path is empty the heatmap is printed to the device.
#' @example
#' correlation_heatmap(iris, interactive = TRUE)
correlation_heatmap <- function(input_df,
method = "spearman",
interactive = FALSE,
out_path = 1){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
# melted_cor_matrix$X1 <- substring(melted_cor_matrix$X1, first = 1, last = 10)
# melted_cor_matrix$X2 <- substring(melted_cor_matrix$X2, first = 1, last = 10)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
correlation_heatmap(iris, interactive = TRUE)
### Install packages
## general
# install.packages("tibble")
# install.packages("stringr")
# install.packages("data.table")
# install.packages("dplyr")
# install.packages("devtools")
# install.packages(DT) # pretty print df (interactive)
## graphs
# install.packages("ggplot2")
# install.packages("scales")
# install.packages("viridis")
## correlation plot
# install.packages("psych")
## for spider chart
# install.packages("fmsb")
## for paralell plot
# install.packages("GGally")
# install.packages("hrbrthemes")
## for PCA
# install.packages("ggfortify")
# install.packages("factoextra")
## heatmap
# install.packages("plotly") # interactive heatmap
### load packages
# library(gridExtra)
library(stringr) # count separators
library(ggplot2)#, # plots
library(data.table) # transpose data frame
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally, hrbrthemes) # paralell plot
library(psych) # for correlation plot
library(dplyr) # select part of data
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(devtools)
library(ggfortify)
library(factoextra)
library(plotly) # interactive heatmap
source("lipidome_comparison_functions.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5),
axis.text.x = element_text(size = 8),
# axis.title = element_text(size = 10),
axis.title.x = element_text(size = 10, hjust = 0.5),
axis.title.y = element_text(size = 10, hjust = 0.5),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- pretty_transpose(lipid_data)
colnames(t_lipid_data) <- gsub(" ", "_", colnames(t_lipid_data), fixed = TRUE)
t_test_data <- pretty_transpose(test_data)
colnames(t_test_data) <- gsub(" ", "_", colnames(t_test_data), fixed = TRUE)
working_data <- t_lipid_data
working_data <- SID_to_metadata(working_data)
working_data <- character_to_factor(working_data)
## summary biological & technical replicates
means_biol <- calc_by_replicate(working_data, "treatment", mean)
means_tech <- calc_by_replicate(working_data, "biol_replicate", mean)
means_all <- apply(dplyr::select_if(working_data, is.numeric), 2, mean)
sd_biol <- calc_by_replicate(working_data, "treatment", sd)
sd_tech <- calc_by_replicate(working_data, "biol_replicate", sd)
sd_all <- apply(dplyr::select_if(working_data, is.numeric), 2, sd)
var_biol <- calc_by_replicate(working_data, "treatment", var)
var_tech <- calc_by_replicate(working_data, "biol_replicate", var)
var_all <- apply(dplyr::select_if(working_data, is.numeric), 2, var)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
histogram_by_factor(working_data, "treatment", plot_name)
boxplot_by_factor(working_data, "treatment", plot_name)
## test for normal distribution
### Don't use with multi modal data --> check histogram and qq plots first
shapiro_all <- lapply(dplyr::select_if(working_data, is.numeric), shapiro.test)
shapiro_all <- sapply(shapiro_all, `[`, c("statistic","p.value"))
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
## check for correlations between lipids
correlation_plot(working_data, "pearson") # for <= 10 variables
## correlation heatmap --> for all variables
correlation_heatmap(working_data, interactive = TRUE)
### plots
## paralell plot for <= 10 variables
parallel_plot(working_data, "treatment", plot_name)
## spider chart
spider_data <- SID_to_metadata(t_lipid_data) # calculate means so there is only one value per group
spider_data <- calc_by_replicate(spider_data, "treatment", mean)
rownames(spider_data) <- spider_data$Group.1
spider_chart(spider_data[1:10])
### PCA
## 1. check variances if scaling is necessary
# (if there is a difference of > one potences between the variances)
wd <- working_data
groups <- wd$treatment
var_all <- apply(dplyr::select_if(wd, is.numeric), 2, var)
lipid_pca <- prcomp(select_if(wd[1:30], is.numeric), scale = TRUE, center = TRUE)
summary(lipid_pca)
var_lipid_pca <- lipid_pca$sdev ^ 2 # variance explained by each pc
prop_of_variance <- var_lipid_pca / sum(var_lipid_pca) # proportion of variance
scree_factoextra(lipid_pca)
scree_base(lipid_pca)
biplot_factoextra(lipid_pca, groups)
### clustering and heatmap
#' The heatmap is optionally interative.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param interactive logical. Print heatmap to device (FALSE, default)
#' or open interactive heatmap in browser (TRUE).
#' @param out_path string. Path to save heatmap to png.
#' If out_path is empty the heatmap is printed to the device.
#' @example
#' correlation_heatmap(iris, interactive = TRUE)
correlation_heatmap <- function(input_df,
method = "spearman",
interactive = FALSE,
out_path = 1){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
# melted_cor_matrix$X1 <- substring(melted_cor_matrix$X1, first = 1, last = 10)
# melted_cor_matrix$X2 <- substring(melted_cor_matrix$X2, first = 1, last = 10)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
correlation_heatmap(iris, interactive = TRUE)
#' The heatmap is optionally interative.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param interactive logical. Print heatmap to device (FALSE, default)
#' or open interactive heatmap in browser (TRUE).
#' @param out_path string. Path to save heatmap to png.
#' If out_path is empty the heatmap is printed to the device.
#' @example
#' correlation_heatmap(iris, interactive = TRUE)
correlation_heatmap <- function(input_df,
method = "spearman",
interactive = FALSE,
out_path = 1){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
# melted_cor_matrix$X1 <- substring(melted_cor_matrix$X1, first = 1, last = 10)
# melted_cor_matrix$X2 <- substring(melted_cor_matrix$X2, first = 1, last = 10)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
correlation_heatmap(iris, interactive = TRUE)
correlation_heatmap(iris)
#' The heatmap is optionally interative.
#' @param input_df data frame.
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param interactive logical. Print heatmap to device (FALSE, default)
#' or open interactive heatmap in browser (TRUE).
#' @param out_path string. Path to save heatmap to png.
#' If out_path is empty the heatmap is printed to the device.
#' @example
#' correlation_heatmap(iris)
correlation_heatmap <- function(input_df,
method = "spearman",
interactive = FALSE,
out_path = 1){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
correlation_heatmap(iris)
cocorrelation_heatmap(iris, interactive = TRUE)
correlation_heatmap(iris, interactive = TRUE)
#' @param method string. Method for calculating the correlation.
#' Options: "pearson", "kendall", "spearman" (default).
#' @param interactive logical. Print heatmap to device (FALSE, default)
#' or open interactive heatmap in browser (TRUE).
#' @param out_path string. Path to save heatmap to png.
#' If out_path is empty the heatmap is printed to the device.
#' @example
#' correlation_heatmap(iris)
#' correlation_heatmap(iris, interactive = TRUE)
#' correlation_heatmap(iris, )
correlation_heatmap <- function(input_df,
method = "spearman",
interactive = FALSE,
out_path = 1){
cor_matrix <- cor(dplyr::select_if(input_df, is.numeric), method = method)
melted_cor_matrix <- reshape::melt(cor_matrix)
names(melted_cor_matrix) <- c("x", "y", "correlation")
head(melted_cor_matrix)
cor_heatmap <- ggplot(data = melted_cor_matrix, aes(x=x, y=y, fill=correlation)) +
geom_tile() +
ggtitle("Spearman correlation") +
scale_fill_viridis_c(option = "magma") +
my_theme +
theme(axis.title = element_blank(),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 90, size = 6, hjust = 1))
if(out_path != 1){
print(paste("Saving heatmap to ", out_path, "_cor_heatmap.png", sep = ""))
ggsave(paste(out_path, "_cor_heatmap.png", sep = ""))
}
if (interactive == TRUE) {
plotly::ggplotly(cor_heatmap) # interactive heatmap
} else {
cor_heatmap # static heatmap
}
}
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/iris", sep = "")
correlation_heatmap(iris, interactive = TRUE, out_path = dir)
correlation_heatmap(iris, interactive = TRUE, out_path = dir)
correlation_heatmap(iris, out_path = dir)
