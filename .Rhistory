devtools::document()
usethis::use_mit_license()
options(usethis.full_name = "Lisa Schneider")
usethis::use_mit_license()
df <- as.data.frame(cbind(c("ID", "a", "b", "c", "d"), c("z", 1, 2, 3, 4), c("x", 5, 6, 7, 8)))
pretty_transpose(df)
#'
#' @description
#' `pretty_transpose` transposes a data frame to a new data frame
#' @details
#' This function takes a data frame, transposes it and sets the former first column as the column names.
#' Row names are automatically generated by the data.table::transpose() function.
#' @param input_df a data frame with character strings and numerics
#' @examples
#' df <- as.data.frame(cbind(c("ID", "a", "b", "c", "d"), c("z", 1, 2, 3, 4), c("x", 5, 6, 7, 8)))
#' pretty_transpose(df)
pretty_transpose <- function(input_df){
t_input_df <- data.table::transpose(data.table::as.data.table(input_df), make.names = 1)
t_input_df <- as.data.frame(t_input_df)
row.names(t_input_df) <- colnames(input_df[-1])
t_input_df
}
df <- as.data.frame(cbind(c("ID", "a", "b", "c", "d"), c("z", 1, 2, 3, 4), c("x", 5, 6, 7, 8)))
pretty_transpose(df)
usethis::use_package("data.table")
generate_categorical_table(iris$Species)
#' Generate table of categorical variable
#'
#' @description `generate_categorical_table` takes a categorical column of a data frame and generates a table where the
#' categorical strings are assigned to a numeric code. This way the information of additional catecorical variabes is not lost when performing
#' an aggregate function.
#' @param categorical_col column of data frame containing categorical values (i.e. strings). Format = df$colname
#' @example
#' generate_categorical_table(iris$Species)
generate_categorical_table <- function(categorical_col){
categorical_table <- cbind.data.frame(as.vector(categorical_col), as.numeric(categorical_col))
categorical_table <- as.data.frame(table(categorical_table))
categorical_table <- categorical_table[categorical_table$Freq != 0,][,-3]
colnames(categorical_table) <- c("V1", "V2")
categorical_table
}
generate_categorical_table(iris$Species)
devtools::document()
devtools::document()
devtools::document()
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
dir <- paste(getwd(), "/data/tracefinder_example.csv", sep = "")
dir <- paste(getwd(), "/data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
#'
#' @description `flip_df` takes a data frame with the columns c(Compound, Type, Filename, Status, Group, Area)
#' and transposes it, so that each area value is assigned to one compound (columnwise) and one SID (rowwise).
#' Additionally the group variable is saved to each sample.  Suitable for preprocessed csvs generated by Thermo Fisher Tracefinder.
#' @param df data frame. Contains the columns c(Compound, Type, Filename, Status, Group, Area).
#' @examples
#' \dontrun
#' dir <- paste(getwd(), "/data/tracefinder_example.csv", sep = "")
#' tf_data <- read.csv(dir)
#' flip_df(tf_data)
flip_df <- function(df){
sample <- levels(df$Filename)
new_df <- data.frame()
for(i in 1:length(sample)){
buffer <- subset(df, Filename == sample[i])
buffer_df <- subset(buffer, select = c(Compound, Area))
t_buffer_df <- pretty_transpose(buffer_df)
t_buffer_df <- tibble::add_column(t_buffer_df, SID = sample[i], .before = 1)
# t_buffer_df <- add_column(t_buffer_df, Group = buffer$Group[1], .after = 1)
new_df <- rbind(new_df, t_buffer_df)
rownames(new_df)[i] <- i
}
new_df
}
flip_df(tf_data)
#' @description
#' `calc_by_replicate` takes a data frame calculates the results of a fuction grouped by a factor
#' @details
#' Take a data frame and calculate the results of a fuction grouped by a given factor.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param funct a generic R function, that takes only one argument (e.g. mean(), summary(), etc.)
#' @param na_action function. Indcates what should happen if there are NA values in the data. c(NULL (default), na.omit).
#' @examples
#' calc_by_replicate(iris, iris$Species, mean)
calc_by_replicate <- function(input_df,
factor,
funct,
na_action = na.omit
){
as.data.frame(
stats::aggregate(dplyr::select_if(input_df, is.numeric),
by=list(factor),
FUN=funct,
na.action = na_action)
)
}
calc_by_replicate(iris, iris$Species, mean)
usethis::use_package("dplyr")
usethis::use_package("tibble")
#' `calc_by_replicate` takes a data frame calculates the results of a fuction grouped by a factor
#' @details
#' Take a data frame and calculate the results of a fuction grouped by a given factor.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param funct a generic R function, that takes only one argument (e.g. mean(), summary(), etc.)
#' @param na_action function. Indcates what should happen if there are NA values in the data. c(NULL (default), na.omit).
#' @example
#' \dontrun
#' calc_by_replicate(iris, iris$Species, mean)
calc_by_replicate <- function(input_df,
factor,
funct,
na_action = na.omit
){
as.data.frame(
stats::aggregate(dplyr::select_if(input_df, is.numeric),
by=list(factor),
FUN=funct,
na.action = na_action)
)
}
#' @example
calc_by_replicate(iris, iris$Species, mean)
library(lipidomeComparison)
calc_by_replicate(iris, iris$Species)
calc_by_replicate(iris, iris$Species, mean)
devtools::document()
usethis::use_data(iris)
usethis::use_data_raw()
usethis::use_data("/home/lisa/FH/Masterarbeit/lipidomeComparison.Rcheck/data/tracefinder_example.csv")
dir <- paste(getwd(), "/data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
library(lipidomeComparison)
flip_df(data.frame(Filename = c("a", "b", "c"), Compound = c(1:3), Area = c(4:6)))
devtools::use_data_raw()
usethis::use_data_raw()
list.files()
usethis::use_data("tracefinder_example.csv")
usethis::use_data(tfData)
## code to prepare `DATASET` dataset goes here
usethis::use_data(DATASET, overwrite = TRUE)
tfData <-
read.csv('data-raw/tracefinder_example.csv') %>%
devtools::use_data(tfData)
library(tibble)
## code to prepare `DATASET` dataset goes here
usethis::use_data(DATASET, overwrite = TRUE)
tfData <-
read.csv('data-raw/tracefinder_example.csv') %>%
devtools::use_data(tfData)
## code to prepare `DATASET` dataset goes here
usethis::use_data(DATASET, overwrite = TRUE)
tfData <-
read.csv('data-raw/tracefinder_example.csv') %>%
usethis::use_data(tfData)
tfData <- read.csv('data-raw/tracefinder_example.csv') %>%
usethis::use_data(tfData)
## code to prepare `DATASET` dataset goes here
tfData <- read.csv('data-raw/tracefinder_example.csv') %>%
usethis::use_data(tfData, overwrite = TRUE)
tfData <- read.csv('data-raw/tracefinder_example.csv')
tfData
## code to prepare `DATASET` dataset goes here
tfData <- read.csv('data-raw/tracefinder_example.csv')
usethis::use_data(tfData, overwrite = TRUE)
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
devtools::document()
usethis::use_pipe()
library(lipidomeComparison)
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
usethis::use_package(iris)
usethis::use_data(iris)
usethis::use_package(iris)
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
#' `calc_by_replicate` takes a data frame calculates the results of a fuction grouped by a factor
#' @details
#' Take a data frame and calculate the results of a fuction grouped by a given factor.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param funct a generic R function, that takes only one argument (e.g. mean(), summary(), etc.)
#' @param na_action function. Indcates what should happen if there are NA values in the data. c(NULL (default), na.omit).
#' @export
#' @example
#' calc_by_replicate(iris, iris$Species, mean)
calc_by_replicate <- function(input_df,
factor,
funct,
na_action = na.omit
){
as.data.frame(
stats::aggregate(dplyr::select_if(input_df, is.numeric),
by=list(factor),
FUN=funct,
na.action = na_action)
)
}
#' Generate table of categorical variable
#'
#' @description `generate_categorical_table` takes a categorical column of a data frame and generates a table where the categorical strings are assigned to a numeric code. This way the information of additional catecorical variabes is not lost when performing an aggregate function.
#' @param categorical_col column of data frame containing categorical values (i.e. strings). Format = df$colname
#' @export
#' @example
#' generate_categorical_table(iris$Species)
generate_categorical_table <- function(categorical_col){
categorical_table <- cbind.data.frame(as.vector(categorical_col), as.numeric(categorical_col))
categorical_table <- as.data.frame(table(categorical_table))
categorical_table <- categorical_table[categorical_table$Freq != 0,][,-3]
colnames(categorical_table) <- c("V1", "V2")
categorical_table
}
#' `calc_by_replicate` takes a data frame calculates the results of a fuction grouped by a factor
#' @details
#' Take a data frame and calculate the results of a fuction grouped by a given factor.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param funct a generic R function, that takes only one argument (e.g. mean(), summary(), etc.)
#' @param na_action function. Indcates what should happen if there are NA values in the data. c(NULL (default), na.omit).
#' @export
#' @example
#' calc_by_replicate(iris, iris$Species, mean)
calc_by_replicate <- function(input_df,
factor,
funct,
na_action = na.omit
){
as.data.frame(
stats::aggregate(dplyr::select_if(input_df, is.numeric),
by=list(factor),
FUN=funct,
na.action = na_action)
)
}
devtools::document()
#' `calc_by_replicate` takes a data frame calculates the results of a fuction grouped by a factor
#' @details
#' Take a data frame and calculate the results of a fuction grouped by a given factor.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param funct a generic R function, that takes only one argument (e.g. mean(), summary(), etc.)
#' @param na_action function. Indcates what should happen if there are NA values in the data. c(NULL (default), na.omit).
#' @export
#' @example
#' calc_by_replicate(iris, iris$Species, mean)
calc_by_replicate <- function(input_df,
factor,
funct,
na_action = na.omit
){
as.data.frame(
stats::aggregate(dplyr::select_if(input_df, is.numeric),
by=list(factor),
FUN=funct,
na.action = na_action)
)
}
devtools::document()
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
lipidomeComparison::calc_by_replicate()
devtools::document()
devtools::document()
library(lipidomeComparison)
lipidomeComparison::calc_by_replicate(iris, iris$Species)
lipidomeComparison::calc_by_replicate(iris, iris$Species, mean)
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
usethis::use_package("viridis")
usethis::use_package("reshape")
search()
usethis::use_package("ggplot2")
usethis::use_package("psych")
usethis::use_package("GGally")
usethis::use_package("stats")
usethis::use_package("plotly")
correlation_plot(iris)
stats::na.omit()
usethis::use_package("fmsb")
usethis::use_package("scales")
library(lipidomeComparison)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(lipidomeComparison)
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
library(lipidomeComparison)
library(lipidomeComparison)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
library(lipidomeComparison)
devtools::document()
usethis::use_data(mtcars)
help(mtcars)
mtcars
help(iris)
iris
help(datasets::iris)
help(iris)
help("mtcars")
help("iris")
help("datasets::iris")
??datasets::iris
??iris
iris
?iris
??iris
devtools::document()
devtools::document()
devtools::document()
??iris
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("corrplot")
usethis::use_package("corrplot")
devtools::document()
devtools::document()
library(ggplot2)
library(ggplot2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("ggrepel")
usethis::use_package("ggrepel")
devtools::document()
library(lipidomeComparison)
library(lipidomeComparison)
usethis::use_package("dendextend")
usethis::use_package("gplots")
usethis::use_package("heatmaply")
usethis::use_data(mtcars, internal = TRUE)
usethis::use_data(USArrests, internal = TRUE)
usethis::use_data(USArrests)
devtools::document()
devtools::document()
usethis::use_package("heatmaply")
devtools::document()
devtools::document()
devtools::document()
library(lipidomeComparison)
usethis::use_package("mixOmics")
usethis::use_data(srbc)
usethis::use_data(srbc)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::install("lipidomeComparison")
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(lipidomeComparison)
devtools::document()
devtools::document()
library(lipidomeComparison)
