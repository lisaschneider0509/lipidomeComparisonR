size.title = 1)
loadings2 <- mixOmics::plotLoadings(new_splsda,
comp = 2,
title = 'Loadings on comp 2',
contrib = 'max',
method = 'mean',
legend.color = viridis(n = 3),
size.title = 1)
lp1 <- ggplot(loadings1, aes(reorder(rownames(loadings1), importance, sum), importance, color = GroupContrib, fill = GroupContrib))+
geom_col() +
coord_flip() +
scale_color_viridis_d(begin = 0.5) +
scale_fill_viridis_d(begin = 0.5) +
labs(title = "Loadings of component 1", x = "feature") +
theme(legend.title = element_blank())
lp2 <- ggplot(loadings2, aes(reorder(rownames(loadings2), importance, sum), importance, color = GroupContrib, fill = GroupContrib))+
geom_col() +
coord_flip() +
scale_color_viridis_d(begin = 1) +
scale_fill_viridis_d(begin = 1) +
labs(title = "Loadings of component 2", x = NULL) +
theme(legend.title = element_blank())
loadings <- ggpubr::ggarrange(lp1, lp2, legend = "right",
labels = c("(A)", "(B)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"), ncol = 2, common.legend = TRUE)
ggsave(paste(plot_path, "pls_da_loadings.png", sep ="/" ),
loadings,
device = "png",
width = 10,
height = 4)
## visualize the abundances of the selected variables
pls_sub1 <- mixOmics::selectVar(new_splsda, comp = 1)$name
pls_sub2 <- mixOmics::selectVar(new_splsda, comp = 2)$name
pls1 <- subset(lipid_list, select = c("Group", pls_sub1))
pls_all <- cbind(pls1, subset(lipid_list, select = c(pls_sub2)))
p_plot <- parallel_plot(pls_all, pls_all$Group)
ggsave(paste(plot_path, "pp_pls_da.pbg", sep ="/" ),
p_plot,
device = "png",
width = 10,
height = 4)
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("viridis", quietly = TRUE)){
install.packages("viridis")}
if (!requireNamespace("mixOmics", quietly = TRUE)){
install.packages("mixOmics")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
### load package
### load packages
library(tidyverse)
library(viridis) # colorblind save color schemes
library(mixOmics)
library(ggpubr)
library(lipidomeComparison)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############ separate numeric data from group data ################
X <- dplyr::select_if(lipid_list, is.numeric)
Y <- lipid_list$Group
summary(Y)
dim(X); length(Y)
########### SPLS-DA without tuning #####
meat_pls <- mixOmics::splsda(X, Y, keepX = c(50,50)) # SPLS-DA without training
meat_pls_wo_training <- plot_pls_scores(meat_pls, title = "PLS-DA of meat")
background <- mixOmics::background.predict(meat_pls, comp.predicted=2, dist = "max.dist")
mixOmics::plotIndiv(meat_pls, comp = 1:2, group = Y,
ind.names = FALSE,
title = "Maximum distance",
legend = TRUE,
background = background,
col = viridis(n = 3),
style = "ggplot2" ,
pch = c(15:17),
cex = 1.5
)
### tuning the SPLS model ###
set.seed(2543) # for reproducibility
list.keepX <- c(5:10, seq(5, 50, 2))
## may take a couple of minuites to run depending on the data
tune_splsda <- mixOmics::tune.splsda(X, Y,
ncomp = 5,
validation = 'Mfold',
folds = 2,            # <= number of observations in the smallest group
progressBar = FALSE,
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, # repeats of crossvalidation
cpus = 2) # faster computation when using the cpu argument
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("viridis", quietly = TRUE)){
install.packages("viridis")}
if (!requireNamespace("mixOmics", quietly = TRUE)){
install.packages("mixOmics")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
### load package
### load packages
library(tidyverse)
library(viridis) # colorblind save color schemes
library(mixOmics)
library(ggpubr)
library(lipidomeComparison)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############ separate numeric data from group data ################
X <- dplyr::select_if(lipid_list, is.numeric)
Y <- lipid_list$Group
summary(Y)
dim(X); length(Y)
########### SPLS-DA without tuning #####
meat_pls <- mixOmics::splsda(X, Y, keepX = c(50,50)) # SPLS-DA without training
meat_pls_wo_training <- plot_pls_scores(meat_pls, title = "PLS-DA of meat")
background <- mixOmics::background.predict(meat_pls, comp.predicted=2, dist = "max.dist")
mixOmics::plotIndiv(meat_pls, comp = 1:2, group = Y,
ind.names = FALSE,
title = "Maximum distance",
legend = TRUE,
background = background,
col = viridis(n = 3),
style = "ggplot2" ,
pch = c(15:17),
cex = 1.5
)
### tuning the SPLS model ###
set.seed(2543) # for reproducibility
list.keepX <- c(5:10, seq(5, 50, 2))
## may take a couple of minuites to run depending on the data
tune_splsda <- mixOmics::tune.splsda(X, Y,
ncomp = 5,
validation = 'Mfold',
folds = 2,            # <= number of observations in the smallest group
progressBar = FALSE,
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, # repeats of crossvalidation
cpus = 2) # faster computation when using the cpu argument
devtools::uninstall("lipidomeComparison")
devtools::uninstall("lipidomeComparison_0.1.0.tar.gz")
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
### load packages
library(tidyverse)
library(ggpubr)
library(lipidomeComparison)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data & subset to two groups #############################
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample=annotation_data$Sample,
Nutrition=annotation_data$Nutrition)
lipid_data <- left_join(lipid_data, map, by="Sample")
beef <- subset(lipid_data, subset = lipid_data$Group == "beef")
beef <- droplevels(beef)
############## Beef univariate ##################################################
p_beef <- one_sample_test_by_col(beef, beef$Nutrition, method = t.test)
adj_beef <- p.adjust(p_beef$p_values, method = "fdr")
fc_beef <- log2_foldchange(beef,
beef$Nutrition,
control_group = "stall",
test_group = "grazing")
beef_volcano <- data.frame(p_value = p_beef, adj_p_value = adj_beef, log2_foldchange = fc_beef)
volcano_plot <- volcano_plot(beef_volcano,
foldchange_col = beef_volcano$log2_foldchange,
significance_col = beef_volcano$adj_p_value,
foldchange = 1,
significance = 0.05)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = volcano_plot,
device = "png",
width = 10,
height = 5
)
BiocManager::install("lipidr")
### install packages
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("viridis", quietly = TRUE)){
install.packages("viridis")}
if (!requireNamespace("BiocManager::", quietly = TRUE)){
install.packages("BiocManager::")}
if (!requireNamespace("lipidr", quietly = TRUE)){
BiocManager::install("lipidr")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
library(tidyverse)
library(lipidr)
library(ggpubr)
library(viridis)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
################### read data ###############
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
########### transform to lipidomics experiment data type ################
lipidr_beef <- subset(lipidr_list, lipidr_list$Group == "beef")
droplevels(lipidr_beef)
lipidr_matrix <- t(select_if(lipidr_beef, is.numeric))
colnames(lipidr_matrix) <- lipidr_beef$Replicate
annotation_df <- subset(lipidr_beef, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- add_sample_annotation(lipidr_experiment, annotation_df)
############ perform and visualize univariate analysis ##############
de_results = de_analysis(
data=lipidr_experiment,
group_col = "Nutrition",
stall - grazing,
measure="Area")
head(de_results)
vp <- volcano_plot(volcano_df = de_results, foldchange_col = de_results$logFC, significance_col = de_results$adj.P.Val)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = vp,
device = "png",
width = 7,
height = 5
)
subset(de_results$Molecule, de_results$adj.P.Val <= 0.05)
############## lipid set enrichment analysis #####################
enrich_results <- lipidr::lsea(de_results, rank.by = "logFC")
sig_lipids <- lipidr::significant_lipidsets(enrich_results)
sig_lipids <- sub(".*_", "", sig_lipids$`stall - grazing`)
lipidClass <- ggplot(data = de_results) +
geom_boxplot(aes(x = Class, y = logFC, fill = is.element(de_results$Class, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by lipid classes", y = "log2FC", x = "lipid class")
totalChain <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cl), y = logFC, fill = is.element(de_results$total_cl, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by total chain length", y = "log2FC", x = "total chain length")
unsaturatedBonds <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cs), y = logFC, fill = is.element(de_results$total_cs, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by unsaturated bonds", y = "log2FC", x = "total unsaturated bonds")
mylist <- list(lipidClass, totalChain, unsaturatedBonds)
lsea <- ggarrange(plotlist = mylist, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom",
labels = c("(A)", "(B)", "(C)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(filename = paste(plot_path, "lsea.png", sep = "/"), plot = lsea, device = "png",
width = 15, height = 5)
### install packages
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("dendextend", quietly = TRUE)){
install.packages("dendextend")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
### load packages
library(tidyverse)
library(ggpubr)
library(lipidomeComparison) # biplot with ggplot
library(dendextend)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############### Clustering #################################################################
### remove all nominal variables except the group variable ###
meat_clust <- data.frame(Group = lipid_data$Group)
meat_clust <- cbind(meat_clust, select_if(lipid_data, is.numeric))
rownames(meat_clust) <- lipid_data$Replicate
### Clustering Performance ###
performance_table <- hclust_performance_table(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra", "minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
### Error: Aesthetics must be valid data columns. Problematic aesthetic(s): y = stats::optim. Why?
# performance_plot <- hclust_performance_plot(meat_clust,
#                                  dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
#                                                   "minkowski"),
#                                  hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
#                                                     "median", "centroid"))
#
# ggsave(paste(plot_path, "clust_performance.png", sep = "/"),
#        performance_plot,
#        device = "png",
#        width = 10,
#        height = 5)
### Hierarchical clustering ###
meat_dist <- dist(select_if(lipid_data, is.numeric), method = "manhattan")
meat_hclust <- hclust(meat_dist, method = "average")
######### Visualization ###########################
### dendrogram ###
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 20, height = 20, units = "cm", res = 200)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
### heatmap ###
hclust_heatmap(lipid_data,
dist_method = "manhattan",
hclust_method = "average",
row_names = meat_clust$Group,
out_path = paste(plot_path, "hclust_heat.png", sep = "/"))
new_lipid_data <- select_if(lipid_data, is.numeric)
new_lipid_data <- cbind(lipid_data$Group, new_lipid_data)
heatmap <- hclust_heatmap_interactive(new_lipid_data,
dist_method = "manhattan",
hclust_method = "average",
row_names = lipid_data$Bio_replicate
)
## Saving an interactive heatmap from heatmaply requires the the "orca" command line tool.
## On linux it can be installed for the conda environment.
## See https://github.com/plotly/orca#installation for more information and installation instructions.
# hclust_map <- hclust_heatmap_interactive(meat_clust,
#                                          dist_method = "manhattan",
#                                          hclust_method = "average",
#                                          out_path = "heatmaply.png")
if (!requireNamespace("tidyverse", quietly = TRUE)){
install.packages("tidyverse")}
if (!requireNamespace("ggpubr", quietly = TRUE)){
install.packages("ggpubr")}
if (!requireNamespace("viridis", quietly = TRUE)){
install.packages("viridis")}
if (!requireNamespace("mixOmics", quietly = TRUE)){
install.packages("mixOmics")}
if (!requireNamespace("lipidomeComparison", quietly = TRUE)){
devtools::install_local("lipidomeComparison_0.1.0.tar.gz")}
### load packages
library(tidyverse)
library(viridis) # colorblind save color schemes
library(mixOmics)
library(ggpubr)
library(lipidomeComparison)
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/meatLipidomics"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/meatLipidomics/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/meatLipidomics/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############ separate numeric data from group data ################
X <- dplyr::select_if(lipid_list, is.numeric)
Y <- lipid_list$Group
summary(Y)
dim(X); length(Y)
########### SPLS-DA without tuning #####
meat_pls <- mixOmics::splsda(X, Y, keepX = c(50,50)) # SPLS-DA without training
meat_pls_wo_training <- plot_pls_scores(meat_pls, title = "PLS-DA of meat")
background <- mixOmics::background.predict(meat_pls, comp.predicted=2, dist = "max.dist")
mixOmics::plotIndiv(meat_pls, comp = 1:2, group = Y,
ind.names = FALSE,
title = "Maximum distance",
legend = TRUE,
background = background,
col = viridis(n = 3),
style = "ggplot2" ,
pch = c(15:17),
cex = 1.5
)
### tuning the SPLS model ###
set.seed(2543) # for reproducibility
list.keepX <- c(5:10, seq(5, 50, 2))
## may take a couple of minuites to run depending on the data
tune_splsda <- mixOmics::tune.splsda(X, Y,
ncomp = 5,
validation = 'Mfold',
folds = 2,            # <= number of observations in the smallest group
progressBar = FALSE,
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, # repeats of crossvalidation
cpus = 2) # faster computation when using the cpu argument
meat_pls_wo_training
