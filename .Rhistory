#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
linecolor = "grey40") +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
linecolor = "grey40",
addlabels = TRUE) +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
linecolor = "grey40",
addlabels = TRUE,
color = "grey40") +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
linecolor = "grey40",
addlabels = TRUE,
labelcolor = "grey40") +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
linecolor = "grey40",
addlabels = TRUE,
labcolor = "grey40") +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 2)[2],
barcolor = viridis(n = 2)[2],
# linecolor = "grey40",
addlabels = TRUE) +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 1, begin = 0.5),
barcolor = viridis(n = 1, begin = 0.5),
# linecolor = "grey40",
addlabels = TRUE) +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
#' @param prcomp_element object of class prcomp or pca. Produced by base::prcomp or FactoMineR::PCA.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' pca_iris <- prcomp(select_if(iris, is.numeric))
#' scree_factoextra(pca_iris, title = "Scree plot iris")
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_factoextra(pca_iris, title = "Scree plot iris", out_path = dir)
scree_factoextra <- function(prcomp_element, title = "Scree plot", out_path = "none"){
scree <- fviz_eig(prcomp_element,
barfill = viridis(n = 1, begin = 0.6),
barcolor = viridis(n = 1, begin = 0.6),
# linecolor = "grey40",
addlabels = TRUE) +
labs(title = title) +
my_theme # sets general apperance, label size and justification
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_screePlot.png", sep = ""))
ggsave(paste(out_path, "_screePlot.png", sep = ""),
plot = scree)
}
else{
scree
}
}
scree_factoextra(meat_pca)
par(mfrow = c(1, 2))
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10)
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10)
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10,
lineolor = "grey40")
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10,
fill = viridis(n = 1), color = viridis(n = 1))
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10,
fill = viridis(n = 1), color = viridis(n = 1),
ggtheme = my_theme)
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10,
fill = viridis(n = 1, begin = 0.8), color = viridis(n = 1, begin = 0.8),
ggtheme = my_theme)
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.8), color = viridis(n = 1, begin = 0.8),
ggtheme = my_theme)
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.5), color = viridis(n = 1, begin = 0.5),
ggtheme = my_theme)
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.5), color = viridis(n = 1, begin = 0.5),
ggtheme = my_theme,
linecolor = "black")
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.4), color = viridis(n = 1, begin = 0.54),
ggtheme = my_theme,
linecolor = "black")
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.3), color = viridis(n = 1, begin = 0.3),
ggtheme = my_theme,
linecolor = "black")
meat_pca_var <- meat_pca$var
### PCA
meat_pca <- PCA(select_if(meat_imputed, is.numeric), scale.unit = TRUE, graph = FALSE)
meat_eig <- get_eigenvalue(meat_pca)
scree_factoextra(meat_pca)
meat_pca_var <- meat_pca$var
prop_var_meat <- round(meat_pca_var / sum(meat_pca_var) * 100, 2)
meat_pca_var
meat_eig <- get_eigenvalue(meat_pca)
meat_eig
scree_factoextra(meat_pca)
scree_base(meat_pca)
scree_base(mtcars)
mtcars
scree_base(mtcars)
#' @param input_df data frame or matrix.
#' @scale bool. Apply scaling when erforming PCA. Default = FALSE.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' scree_base(mtcars)
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_base(pca_iris, out_path = dir)
scree_base <- function(input_df,
title = c("Scree plot", "Cummulative scree plot"),
scale = FALSE,
out_path = "none"){
out_name <- paste(out_path, "_screePlot", ".png", sep = "")
prcomp_element <- prcomp(input_df)
print(prcomp_element)
# variance explained by each pc
var_pca <- prcomp_element$sdev ^ 2
prop_of_variance <- round(var_pca / sum(var_pca), 5) * 100
cummulative_prop_of_variance <- cumsum(prop_of_variance)
proportion_of_variance_table <- data.frame(Proportion_of_variance = prop_of_variance,
Cummulative_proportion_of_variance = cummulative_prop_of_variance)
func <- function(){
par(mfrow=c(1,2))
plot(prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type = "b")
title( main = title[1], cex.main = 0.9, font.main = 1,
cex.lab = 0.8,
xlab =" Principal Component ",
ylab =" Proportion of Variance Explained [%]")
plot(cummulative_prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type="b")
title( main = title[2], cex.main = 0.9, font.main = 1,
cex.lab = 0.8,
xlab ="Principal Component",
ylab ="Cumulative Proportion of Variance Explained [%]")
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
scree_base(mtcars)
#' @param input_df data frame or matrix.
#' @scale bool. Apply scaling when erforming PCA. Default = FALSE.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' scree_base(mtcars)
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_base(pca_iris, out_path = dir)
scree_base <- function(input_df,
title = c("Scree plot", "Cummulative scree plot"),
scale = FALSE,
out_path = "none"){
out_name <- paste(out_path, "_screePlot", ".png", sep = "")
prcomp_element <- prcomp(input_df)
# variance explained by each pc
var_pca <- prcomp_element$sdev ^ 2
prop_of_variance <- round(var_pca / sum(var_pca), 5) * 100
cummulative_prop_of_variance <- cumsum(prop_of_variance)
proportion_of_variance_table <- data.frame(Proportion_of_variance = prop_of_variance,
Cummulative_proportion_of_variance = cummulative_prop_of_variance)
func <- function(){
par(mfrow=c(1,2))
plot(prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type = "b")
title( main = title[1], cex.main = 0.9, font.main = 1,
cex.lab = 0.8,
xlab =" Principal Component ",
ylab =" Proportion of Variance Explained [%]")
plot(cummulative_prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type="b")
title( main = title[2], cex.main = 0.9, font.main = 1,
cex.lab = 0.8,
xlab ="Principal Component",
ylab ="Cumulative Proportion of Variance Explained [%]")
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
scree_base(mtcars)
scree_base(mtcars, out_path = dir)
scree_base(mtcars, out_path = dir)
scree_base(mtcars)
dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
dir <- paste(getwd(), "/examples/iris", sep = "")
scree_base(mtcars, out_path = dir)
scree_base(iris)
scree_base(select_if(iris, is.numeric))
scree_base(mtcars)
scree_base(meat_pca)
scree_base(meat_imputed)
scree_base(select_if(meat_imputed, is.numeric))
par(mar = c(1, 1, 1, 1))
scree_base(select_if(meat_imputed, is.numeric))
par(mar = c(1, 1, 1, 10))
scree_base(select_if(meat_imputed, is.numeric))
par(mar = c(2, 2, 2, 2))
scree_base(select_if(meat_imputed, is.numeric))
#' @param input_df data frame or matrix.
#' @scale bool. Apply scaling when erforming PCA. Default = FALSE.
#' @param out_path string. Path to save plot to png.
#' If out_path is empty, the plot is printed to the device.
#' @examples
#' scree_base(mtcars)
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' scree_base(mtcars, out_path = dir)
scree_base <- function(input_df,
title = c("Scree plot", "Cummulative scree plot"),
scale = FALSE,
out_path = "none"){
out_name <- paste(out_path, "_screePlot", ".png", sep = "")
prcomp_element <- prcomp(input_df)
# variance explained by each pc
var_pca <- prcomp_element$sdev ^ 2
prop_of_variance <- round(var_pca / sum(var_pca), 5) * 100
cummulative_prop_of_variance <- cumsum(prop_of_variance)
proportion_of_variance_table <- data.frame(Proportion_of_variance = prop_of_variance,
Cummulative_proportion_of_variance = cummulative_prop_of_variance)
func <- function(){
par(mfrow=c(1,2), mar = c(2, 2, 2, 2))
plot(prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type = "b")
title( main = title[1], cex.main = 0.9, font.main = 1,
cex.lab = 1,
xlab =" Principal Component ",
ylab =" Proportion of Variance Explained [%]")
plot(cummulative_prop_of_variance, # scree plot to decide which PCs are used
main = "", xlab ="", ylab ="",
ylim=c(0 ,100),
type="b")
title( main = title[2], cex.main = 0.9, font.main = 1,
cex.lab = 0.8,
xlab ="Principal Component",
ylab ="Cumulative Proportion of Variance Explained [%]")
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
scree_base(select_if(meat_imputed, is.numeric))
biplot_ggplot2(meat_imputed, "Group", loadings = FALSE, ellipse = TRUE)
biplot_factoextra(meat_pca, meat_imputed$Group, ellipse = TRUE)
#' biplot_ggplot2(iris, "Species")
#' biplot_ggplot2(iris, "Species", ellipse = TRUE, loadings = TRUE)
#' \dontrun
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' biplot_ggplot2(iris,
#'                loadings = FALSE,
#'                title = "Biplot of Iris",
#'                ellipse = TRUE,
#'                out_path = dir)
biplot_ggplot2 <- function(input_df,
groups = "none",
scale = FALSE,
loadings = FALSE,
ellipse = FALSE,
title = "PCA - Biplot",
out_path = "none"){
if(groups == "none"){
group_by <- NULL
}
else {
group_by <- groups
}
prcomp_element <- prcomp(select_if(input_df, is.numeric), scale. = scale)
biplot <- autoplot(prcomp_element, data = input_df,
colour = group_by,
loadings = loadings,
loadings.colour =  "black",
loadings.label = loadings,
loadings.label.size = 2,
loadings.label.colour = "black",
frame = ellipse,
frame.type = "norm") +
ggtitle(title) +
my_theme
if(groups != "none"){
group_color <- as.vector(viridis(n = length(levels(input_df[[group_by]])), alpha = 1))
biplot <- biplot +
scale_fill_manual(values = group_color) +
scale_color_manual(values = group_color)
}
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_biplot.png", sep = ""))
ggsave(paste(out_path, "_biplot.png", sep = ""),
plot = biplot)
}  else{
biplot
}
}
biplot_ggplot2(iris)
biplot_ggplot2(meat_imputed, "Group", loadings = FALSE, ellipse = TRUE)
biplot_ggplot2(meat_imputed, "Group", loadings = FALSE, ellipse = TRUE, scale = TRUE)
scree_factoextra(meat_pca)
scree_factoextra(meat_pca)
meat_pca <- PCA(select_if(meat_imputed, is.numeric), scale.unit = TRUE, graph = FALSE)
meat_eigenvalue <- get_eigenvalue(meat_pca)
meat_eigenvalue
scree_factoextra(meat_pca)
scree_base(select_if(meat_imputed, is.numeric))
biplot_ggplot2(meat_imputed, "Group", loadings = FALSE, ellipse = TRUE, scale = TRUE)
biplot_factoextra(meat_pca, meat_imputed$Group, ellipse = TRUE)
plot_contrib_to_pc(meat_pca, out_path = plot_name)
fviz_contrib(meat_pca, choice = "var", axes = 1, top = 10,
fill = viridis(n = 1, begin = 0.3), color = viridis(n = 1, begin = 0.3),
ggtheme = my_theme)
fviz_contrib(meat_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.3), color = viridis(n = 1, begin = 0.3),
ggtheme = my_theme,
linecolor = "black")
