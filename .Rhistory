cex=0.7,
pt.cex=1.3)
}
colnames(spider_data)
row.names(spider_data)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
row.names(spider_data)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df$Group.1 # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
print(spider_labels)
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7
#title = title
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(spider_data[5:15])
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
my_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df$Group.1 # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
print(row.names(spider_data))
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7
#title = title
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(my_data[5:15])
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
my_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df[1] # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
print(row.names(spider_data))
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7
#title = title
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(my_data[5:15])
my_data[1]
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
my_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df[1] # set new row names
print(row.names(minimized_df))
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
print(row.names(spider_data))
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7
#title = title
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(my_data[5:15])
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df$Group.1 # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7,
title = NULL
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(spider_data)
### load packages
# library(gridExtra)
library(stringr) # count separators
library(ggplot2)#, # plots
#library(ggradar, scales) # radar chart with ggplot
# library(tidyr)
library(data.table) # transpose data frame
# library(textshape)
library(tibble) # data frame manipulation
# library(RVAideMemoire)
library(MASS) # for paralell plot
library(psych) # for correlation plot
library(dplyr) # select part of data
library(fmsb) # spider chart
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- pretty_transpose(lipid_data)
t_test_data <- pretty_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
working_data <- character_to_factor(working_data)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
source("lipidome_comparison_functions.R")
### load packages
# library(gridExtra)
library(stringr) # count separators
library(ggplot2)#, # plots
#library(ggradar, scales) # radar chart with ggplot
# library(tidyr)
library(data.table) # transpose data frame
# library(textshape)
library(tibble) # data frame manipulation
# library(RVAideMemoire)
library(MASS) # for paralell plot
library(psych) # for correlation plot
library(dplyr) # select part of data
library(fmsb) # spider chart
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- pretty_transpose(lipid_data)
t_test_data <- pretty_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
working_data <- character_to_factor(working_data)
## summary biological & technical replicates
means_biol <- calc_by_replicate(working_data, "treatment", mean)
means_tech <- calc_by_replicate(working_data, "biol_replicate", mean)
sd_biol <- calc_by_replicate(working_data, "treatment", sd)
sd_tech <- calc_by_replicate(working_data, "biol_replicate", sd)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df$Group.1 # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7,
title = NULL
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(spider_data)
## spider chart
input_df <- SID_to_metadata(t_lipid_data)
spider_data <- calc_by_replicate(input_df, "treatment", mean)
spider_chart <- function(minimized_df, title=""){ # todo get labels ot of the plot
# input_df <= 10 columns
# minimized_df = dataframe with only one row per group (i.e. calculate means)
row.names(minimized_df) <- minimized_df$Group.1 # set new row names
spider_data <- minimized_df[-(1)] # remove column with rownames
spider_labels <- substring(colnames(spider_data),
first = 1,
last = 10) # set max. label length to 10 characters
## Set graphic colors
# see RColorBrewer::display.brewer.all(colorblindFriendly = TRUE/FALSE) for more color options
colors_border <- RColorBrewer::brewer.pal(3, "Set1")
colors_in <- alpha(colors_border,0.2)
fmsb::radarchart( spider_data, # min. and max. value chosen automatically
axistype=0 ,
maxmin=F,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="black", cglwd=0.8,
#custom labels
vlabels = spider_labels,
vlcex=0.7,
title = title
)
# Add a legend
legend(x=-2, y=1.4,
legend = rownames(spider_data),
bty = "n", pch=20,
col=colors_border,
# text.col = "grey",
cex=0.7,
pt.cex=1.3)
}
spider_chart(spider_data)
spider_chart(spider_data, title = "Test")
## spider chart
working_data <- SID_to_metadata(t_lipid_data)
working_data <- calc_by_replicate(working_data, "treatment", mean)
### Install packages
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tidyr")
# install.packages("data.table")
# install.packages("textshape")
## BiocManager::install("mixOmics")
## BiocManager::install("RVAideMemoire")
# install.packages("MASS")
# install.packages("psych")
# install.packages("dplyr")
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
# install.packages("fmsb")
# install.packages("RColorBrewer")
# install.packages("scales")
### load packages
# library(gridExtra)
library(stringr) # count separators
library(ggplot2)#, # plots
#library(ggradar, scales) # radar chart with ggplot
# library(tidyr)
library(data.table) # transpose data frame
# library(textshape)
library(tibble) # data frame manipulation
# library(RVAideMemoire)
library(MASS) # for paralell plot
library(psych) # for correlation plot
library(dplyr) # select part of data
library(fmsb) # spider chart
library(RColorBrewer) # pretty color combinations
library(scales) # scale opacity of filling (alpha)
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- pretty_transpose(lipid_data)
t_test_data <- pretty_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
working_data <- character_to_factor(working_data)
## summary biological & technical replicates
means_biol <- calc_by_replicate(working_data, "treatment", mean)
means_tech <- calc_by_replicate(working_data, "biol_replicate", mean)
sd_biol <- calc_by_replicate(working_data, "treatment", sd)
sd_tech <- calc_by_replicate(working_data, "biol_replicate", sd)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
histogram_by_factor(working_data, "treatment", plot_name)
boxplot_by_factor(working_data, "treatment", plot_name)
## test for normal distribution
### Don't use with multi modal data --> check histogram and qq plots first
shapiro_all <- lapply(dplyr::select_if(working_data, is.numeric), shapiro.test)
shapiro_all <- sapply(shapiro_all, `[`, c("statistic","p.value"))
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
## check for correlations between lipids
correlation_plot(working_data, "pearson") # for <= 10 variables
### plots
## paralell plot for <= 10 variables
parallel_plot(working_data, "biol_replicate", plot_name)
## spider chart
working_data <- SID_to_metadata(t_lipid_data) # calculate means so there is only one value per group
working_data <- calc_by_replicate(working_data, "treatment", mean)
spider_chart(spider_data)
### Install packages
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tidyr")
# install.packages("data.table")
# install.packages("textshape")
## BiocManager::install("mixOmics")
## BiocManager::install("RVAideMemoire")
# install.packages("MASS")
# install.packages("psych")
# install.packages("dplyr")
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
# install.packages("fmsb")
# install.packages("RColorBrewer")
# install.packages("scales")
### load packages
# library(gridExtra)
library(stringr) # count separators
library(ggplot2)#, # plots
#library(ggradar, scales) # radar chart with ggplot
# library(tidyr)
library(data.table) # transpose data frame
# library(textshape)
library(tibble) # data frame manipulation
# library(RVAideMemoire)
library(MASS) # for paralell plot
library(psych) # for correlation plot
library(dplyr) # select part of data
library(fmsb) # spider chart
library(RColorBrewer) # pretty color combinations
library(scales) # scale opacity of filling (alpha)
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- pretty_transpose(lipid_data)
t_test_data <- pretty_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
working_data <- character_to_factor(working_data)
## summary biological & technical replicates
means_biol <- calc_by_replicate(working_data, "treatment", mean)
means_tech <- calc_by_replicate(working_data, "biol_replicate", mean)
sd_biol <- calc_by_replicate(working_data, "treatment", sd)
sd_tech <- calc_by_replicate(working_data, "biol_replicate", sd)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
histogram_by_factor(working_data, "treatment", plot_name)
boxplot_by_factor(working_data, "treatment", plot_name)
## test for normal distribution
### Don't use with multi modal data --> check histogram and qq plots first
shapiro_all <- lapply(dplyr::select_if(working_data, is.numeric), shapiro.test)
shapiro_all <- sapply(shapiro_all, `[`, c("statistic","p.value"))
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
## check for correlations between lipids
correlation_plot(working_data, "pearson") # for <= 10 variables
### plots
## paralell plot for <= 10 variables
parallel_plot(working_data, "biol_replicate", plot_name)
## spider chart
working_data <- SID_to_metadata(t_lipid_data) # calculate means so there is only one value per group
working_data <- calc_by_replicate(working_data, "treatment", mean)
spider_chart(working_data)
