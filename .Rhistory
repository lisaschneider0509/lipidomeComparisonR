spider_chart(meat_spider[21:40], legend_lab = c("fish", "meat", "game"))
spider_chart(meat_spider[41:80], legend_lab = c("fish", "meat", "game"))
#' rownames(minimized_iris) <- minimized_iris$Group.1
#' spider_chart(minimized_iris, title = "Spider chart of iris", legend_lab = c(1, 2, 3))
#' \dontrun
#' minimized_iris <- aggregate(dplyr::select_if(iris, is.numeric),
#'                             by = list(iris$Species),
#'                             FUN = mean)
#' rownames(minimized_iris) <- minimized_iris$Group.1
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' spider_chart(minimized_iris, out_path = dir)
spider_chart <- function(minimized_df,
title = "Spider chart",
legend_lab = rownames(minimized_df),
out_path = "none"){ # todo get labels ot of the plot
out_name <- paste(out_path, "_spiderChart", ".png", sep = "")
func <- function(){
spider_data <- dplyr::select_if(minimized_df, is.numeric) # remove column with rownames
spider_labels <- substring(colnames(spider_data), first = 1, last = 5) # set max. label length to 10 characters
spider_min <- floor(min(spider_data))
spider_max <- ceiling(max(spider_data))
spider_data <- as.data.frame(select_if(spider_data, is.numeric))
# add max and min to the dataframe to plot the grid
spider_data <- rbind(spider_min, spider_max, spider_data)
## set colors
colors_border = as.vector(viridis(n = nrow(minimized_df), option = "viridis"))
colors_in = alpha(colors_border, alpha = 0.1)
## radar chart
radarchart(spider_data,
axistype=0,
#custom polygon
pcol=colors_border,
pfcol=colors_in,
plwd=4,
plty=1,
# custom grid
cglcol="grey",
cglty=1,
axislabcol="grey",
cglwd=0.8,
# custom labels
vlcex=0.6,
vlabels = spider_labels,
centerzero = FALSE)
title(main = title, cex.main = 0.9, font.main = 1)
## Add a legend
legend(x=-2,
y=1.1,
legend = legend_lab,
bty = "n",
pch=20,
col=colors_border,
text.col = "black",
cex=0.7, pt.cex=1.3)
}
## print to device or save
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
spider_chart(minimized_iris, title = "Spider chart of iris", legend_lab = c(1, 2, 3))
spider_chart(meat_spider[41:80], legend_lab = c("fish", "meat", "game"))
#' rownames(minimized_iris) <- minimized_iris$Group.1
#' spider_chart(minimized_iris, title = "Spider chart of iris", legend_lab = c(1, 2, 3))
#' \dontrun
#' minimized_iris <- aggregate(dplyr::select_if(iris, is.numeric),
#'                             by = list(iris$Species),
#'                             FUN = mean)
#' rownames(minimized_iris) <- minimized_iris$Group.1
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/iris", sep = "")
#' spider_chart(minimized_iris, out_path = dir)
spider_chart <- function(minimized_df,
title = "Spider chart",
legend_lab = rownames(minimized_df),
out_path = "none"){ # todo get labels ot of the plot
out_name <- paste(out_path, "_spiderChart", ".png", sep = "")
func <- function(){
spider_data <- dplyr::select_if(minimized_df, is.numeric) # remove column with rownames
spider_labels <- substring(colnames(spider_data), first = 1, last = 10) # set max. label length to 10 characters
spider_min <- floor(min(spider_data))
spider_max <- ceiling(max(spider_data))
spider_data <- as.data.frame(select_if(spider_data, is.numeric))
# add max and min to the dataframe to plot the grid
spider_data <- rbind(spider_min, spider_max, spider_data)
## set colors
colors_border = as.vector(viridis(n = nrow(minimized_df), option = "viridis"))
colors_in = alpha(colors_border, alpha = 0.1)
## radar chart
radarchart(spider_data,
axistype=0,
#custom polygon
pcol=colors_border,
pfcol=colors_in,
plwd=4,
plty=1,
# custom grid
cglcol="grey",
cglty=1,
axislabcol="grey",
cglwd=0.8,
# custom labels
vlcex=0.6,
vlabels = spider_labels,
centerzero = FALSE)
title(main = title, cex.main = 0.9, font.main = 1)
## Add a legend
legend(x=-2,
y=1.1,
legend = legend_lab,
bty = "n",
pch=20,
col=colors_border,
text.col = "black",
cex=0.7, pt.cex=1.3)
}
## print to device or save
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name)
func()
dev.off()
}
else{
func()
}
}
spider_chart(meat_spider[41:80], legend_lab = c("fish", "meat", "game"))
### pca
scree_factoextra(meat_tech)
### pca
prcomp(meat_tech)
### pca
prcomp(select_if(meat_tech, is.numeric))
### pca
meat_tech_pca <- prcomp(select_if(meat_tech, is.numeric))
scree_base(meat_tech_pca)
scree_factoextra(meat_tech_pca)
meat_tech_pca
summary(meat_tech_pca)
biplot_factoextra(meat_tech_pca)
meat_tech_groups <- meat_tech$Group
biplot_factoextra(meat_tech_pca, meat_tech_groups)
biplot_factoextra(meat_tech_pca, meat_tech_groups, loadings = FALSE)
pca_iris <- prcomp(dplyr::select_if(iris, is.numeric))
iris_groups <- iris$Species
biplot_factoextra(pca_iris)
biplot_factoextra(pca_iris,
groups = iris_groups,
ellipse = TRUE,
loadings = FALSE)
biplot_ggplot2(meat_tech, groups = meat_tech_groups, loadings = FALSE)
biplot_ggplot2(meat_tech, groups = "Group", loadings = FALSE)
biplot_ggplot2(meat_tech, groups = "Group", loadings = TRUE)
biplot_ggplot2(meat_tech, groups = "Group", loadings = FALSE)
biplot_ggplot2(meat_tech, groups = "Group", loadings = FALSE, ellipse = TRUE)
biplot_ggplot2(meat_imputed, groups = "Group", loadings = FALSE)
biplot_ggplot2(meat_imputed, groups = "Group", loadings = FALSE, ellipse = TRUE)
source("lipidome_comparison_hypothesis_testing.R")
## set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
# axis.title = element_text(size = 10, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
#' Calculate p-values by column
#'
#' @description `p_values_by_column` takes a data frame and a grouping vector and returns a data frame with the p-values of a given method.
#' @details This function takes a data frame ans a grouping vector and performs a given hypothesis test on all numeric variables. The results are returned in a new data frame.
#' @param input_df data frame. Contains at least one numeric variable.
#' @param group_vector vector. Vector containing the groups to be compared. group_vector = input_df$group (or other vector of length nrow(input_df))
#' @param alternative string. Specifies the alternative hypothesis. c("two.sided" (default), "greater", "less")
#' @param confidence_level numeric. Confidence level of the interval. Default = 0.95
#' @example
#' my_iris <- subset(x = iris, Species == "setosa" | Species == "versicolor")
#' ttest_by_column(my_iris, my_iris$Species)
ttest_by_column <- function(input_df,
group_vector,
alternative = "two.sided",
confidence_level = 0.95){
p_values <- apply(select_if(input_df, is.numeric), 2,
function(x) t.test(x ~ group_vector,
alternative = alternative,
conf.level = confidence_level)$p.value)
as.data.frame(p_values)
}
#' Calculate log2 foldchange
#'
#' @description `log2_foldchange` calculates the log2 foldchange for two groups of a given data frame.
#' @details This function takes a data frame and a grouping vector and calculates the log2 foldchange between two groups.
#' The results are returned in a new data frame.
#' @param input_df data frame. Contains at least one numeric variable.
#' @param group_vector vector. Vctor containing the grouping variabe. group_vector = input_df$group (or any vector of length nrow(input_df))
#' @example
#' my_iris <- subset(x = iris, Species == "setosa" | Species == "versicolor")
#' log2_foldchange(my_iris, my_iris$Species)
log2_foldchange <- function(input_df,
group_vector){
log2_df <- log2(select_if(input_df, is.numeric))
log2_df$group <- group_vector
means <- aggregate(select_if(log2_df, is.numeric), by = list(log2_df$group), FUN = mean)
rownames(means) <- means$Group.1
means <- as.data.frame(select_if(means, is.numeric))
log2_foldchange <- vector()
for(i in 1:ncol(means)){
log2_foldchange[i] <- means[1, i] - means[2, i]
}
out_df <- as.data.frame(log2_foldchange)
rownames(out_df) <- colnames(select_if(input_df, is.numeric))
out_df
}
#' Volcano plot
#'
#' @description `volcano_plot` prints a volcano plot using a data frame containing p-values and foldchanges
#' @details This function takes a data frame with columns for p-values and (log2)foldchanges and returns a dotplot resembelling a volcano plot.
#' It uses the given significance and foldchange threshods to mark significantly up- and down-regulated elements by color and by displaying
#' threshold lines.
#' @param input_df data frame.
#' @param foldchange_col vector. Column of input_df containing the foldchange values. Format: input_df$foldchange_col
#' @param significance_col vector. Column of input_df containing the p-values. Format: input_df$significance_col
#' @param significance numeric. Value for the significance threshold. Default = 0.05.
#' @param foldchange numeric. Vaue for the foldchange threshold. Default = #todo
#' @param title string. Main title. Default = "Volcano plot"
#' @param x_lab string. x-axix title. Default = "log2Fold"
#' @param y_lab string. y-axis title- Default = "-log10(p-value)"
#' @param labels vector of length nrow(volcano_df). Default = "none". If lables is set, points above the threshold are labelled.
#' @param out_path string. Path to save volcano plot do png. Default = "none".
#' If "none", the plot is either printed or saved to a variabe.
#' @example
#' set.seed(100)
#' fold_changes <- c(rnorm(2000, 0, 2))
#' pvalues <- runif(n=2000, min=1e-50, max=.1)
#' volcano_test <- as.data.frame(cbind(fold_changes, pvalues))
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues, foldchange = 1)
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues,
#'              foldchange = 1,
#'              labels =c(1:nrow(volcano_test)))
#' \dontrun
#' {dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/vp", sep = "")
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues,
#'              foldchange = 1, significance = 0.01,
#'              out_path = dir)}
volcano_plot <- function(volcano_df,
foldchange_col, significance_col,
significance = 0.05,
foldchange, #todo = 0.05
title = "Volcano plot",
x_lab = "log2Fold", y_lab = "-log10(p-value)",
labels = vector(),
out_path = "none"){
is_significant <- significance_col < significance
threshold <- vector()
for(i in 1:length(is_significant)){
if(is_significant[i] == TRUE && foldchange_col[i] < -1*foldchange){
buffer <- "down"
}
else if(is_significant[i] == TRUE && foldchange_col[i] > foldchange){
buffer <- "up"
}
else{
buffer <- "not_sig"
}
threshold <- c(threshold, buffer)
}
volcano_df <- cbind(volcano_df, threshold)
limits <- max(-1*min(foldchange_col), max(foldchange_col))
mycolors <- viridis(n = 2, begin = 0, end = 0.9)
volcano <- ggplot(data = volcano_df,
aes(x = foldchange_col, y = -1*log10(significance_col))) +
geom_point(aes(color = as.factor(threshold)), shape = 20) +
geom_hline(yintercept = -1*log10(significance),
linetype = "dashed",
colour = "grey40") +
geom_vline(xintercept = -1*foldchange,
linetype = "dashed",
colour = "grey40") +
geom_vline(xintercept = foldchange,
linetype = "dashed",
colour = "grey40") +
labs(title = title) +
xlab(x_lab) + ylab(y_lab) +
scale_x_continuous(limits = c(-1*limits, limits)) +
scale_color_manual(name = "Threshold",
values = c("up" = mycolors[1], "down" = mycolors[2], "not_sig" = "grey"),
labels = c("Down-regulated", "Not significant FC", "Up-regulated")) +
theme(legend.position = "right")
if (length(labels) != 0){
volcano <- volcano + geom_text_repel(aes(label=ifelse(threshold != "not_sig", as.character(labels),'')),
hjust=0, vjust=0,
size = 3)
}
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_volcano.png", sep = ""))
ggsave(paste(out_path, "_volcano.png", sep = ""),
plot = volcano)
}
volcano
}
# p_vals <- ttest_by_column(working_data, working_data$treatment)
# adj_p_vals <- p.adjust(p_vals$p_values, method = "fdr")
# log2FC <- log2_foldchange(working_data, working_data$treatment)
# myvolcano_df <- cbind(p_vals, adj_p_vals, log2FC)
# myvolcano_df$log2_foldchange[3] <- 0.1
volcano_plot(myvolcano_df,
significance_col = myvolcano_df$p_values,
foldchange_col = myvolcano_df$log2_foldchange,
foldchange = 0.05,
labels = 1:nrow(myvolcano_df))
source("lipidome_comparison_hypothesis_testing.R")
## set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
# axis.title = element_text(size = 10, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
#' Calculate p-values by column
#'
#' @description `p_values_by_column` takes a data frame and a grouping vector and returns a data frame with the p-values of a given method.
#' @details This function takes a data frame ans a grouping vector and performs a given hypothesis test on all numeric variables. The results are returned in a new data frame.
#' @param input_df data frame. Contains at least one numeric variable.
#' @param group_vector vector. Vector containing the groups to be compared. group_vector = input_df$group (or other vector of length nrow(input_df))
#' @param alternative string. Specifies the alternative hypothesis. c("two.sided" (default), "greater", "less")
#' @param confidence_level numeric. Confidence level of the interval. Default = 0.95
#' @example
#' my_iris <- subset(x = iris, Species == "setosa" | Species == "versicolor")
#' ttest_by_column(my_iris, my_iris$Species)
ttest_by_column <- function(input_df,
group_vector,
alternative = "two.sided",
confidence_level = 0.95){
p_values <- apply(select_if(input_df, is.numeric), 2,
function(x) t.test(x ~ group_vector,
alternative = alternative,
conf.level = confidence_level)$p.value)
as.data.frame(p_values)
}
#' Calculate log2 foldchange
#'
#' @description `log2_foldchange` calculates the log2 foldchange for two groups of a given data frame.
#' @details This function takes a data frame and a grouping vector and calculates the log2 foldchange between two groups.
#' The results are returned in a new data frame.
#' @param input_df data frame. Contains at least one numeric variable.
#' @param group_vector vector. Vctor containing the grouping variabe. group_vector = input_df$group (or any vector of length nrow(input_df))
#' @example
#' my_iris <- subset(x = iris, Species == "setosa" | Species == "versicolor")
#' log2_foldchange(my_iris, my_iris$Species)
log2_foldchange <- function(input_df,
group_vector){
log2_df <- log2(select_if(input_df, is.numeric))
log2_df$group <- group_vector
means <- aggregate(select_if(log2_df, is.numeric), by = list(log2_df$group), FUN = mean)
rownames(means) <- means$Group.1
means <- as.data.frame(select_if(means, is.numeric))
log2_foldchange <- vector()
for(i in 1:ncol(means)){
log2_foldchange[i] <- means[1, i] - means[2, i]
}
out_df <- as.data.frame(log2_foldchange)
rownames(out_df) <- colnames(select_if(input_df, is.numeric))
out_df
}
#' Volcano plot
#'
#' @description `volcano_plot` prints a volcano plot using a data frame containing p-values and foldchanges
#' @details This function takes a data frame with columns for p-values and (log2)foldchanges and returns a dotplot resembelling a volcano plot.
#' It uses the given significance and foldchange threshods to mark significantly up- and down-regulated elements by color and by displaying
#' threshold lines.
#' @param input_df data frame.
#' @param foldchange_col vector. Column of input_df containing the foldchange values. Format: input_df$foldchange_col
#' @param significance_col vector. Column of input_df containing the p-values. Format: input_df$significance_col
#' @param significance numeric. Value for the significance threshold. Default = 0.05.
#' @param foldchange numeric. Vaue for the foldchange threshold. Default = #todo
#' @param title string. Main title. Default = "Volcano plot"
#' @param x_lab string. x-axix title. Default = "log2Fold"
#' @param y_lab string. y-axis title- Default = "-log10(p-value)"
#' @param labels vector of length nrow(volcano_df). Default = "none". If lables is set, points above the threshold are labelled.
#' @param out_path string. Path to save volcano plot do png. Default = "none".
#' If "none", the plot is either printed or saved to a variabe.
#' @example
#' set.seed(100)
#' fold_changes <- c(rnorm(2000, 0, 2))
#' pvalues <- runif(n=2000, min=1e-50, max=.1)
#' volcano_test <- as.data.frame(cbind(fold_changes, pvalues))
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues, foldchange = 1)
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues,
#'              foldchange = 1,
#'              labels =c(1:nrow(volcano_test)))
#' \dontrun
#' {dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/vp", sep = "")
#' volcano_plot(volcano_test,
#'              foldchange_col = volcano_test$fold_changes,
#'              significance_col = volcano_test$pvalues,
#'              foldchange = 1, significance = 0.01,
#'              out_path = dir)}
volcano_plot <- function(volcano_df,
foldchange_col, significance_col,
significance = 0.05,
foldchange, #todo = 0.05
title = "Volcano plot",
x_lab = "log2Fold", y_lab = "-log10(p-value)",
labels = vector(),
out_path = "none"){
is_significant <- significance_col < significance
threshold <- vector()
for(i in 1:length(is_significant)){
if(is_significant[i] == TRUE && foldchange_col[i] < -1*foldchange){
buffer <- "down"
}
else if(is_significant[i] == TRUE && foldchange_col[i] > foldchange){
buffer <- "up"
}
else{
buffer <- "not_sig"
}
threshold <- c(threshold, buffer)
}
volcano_df <- cbind(volcano_df, threshold)
limits <- max(-1*min(foldchange_col), max(foldchange_col))
mycolors <- viridis(n = 2, begin = 0, end = 0.9)
volcano <- ggplot(data = volcano_df,
aes(x = foldchange_col, y = -1*log10(significance_col))) +
geom_point(aes(color = as.factor(threshold)), shape = 20) +
geom_hline(yintercept = -1*log10(significance),
linetype = "dashed",
colour = "grey40") +
geom_vline(xintercept = -1*foldchange,
linetype = "dashed",
colour = "grey40") +
geom_vline(xintercept = foldchange,
linetype = "dashed",
colour = "grey40") +
labs(title = title) +
xlab(x_lab) + ylab(y_lab) +
scale_x_continuous(limits = c(-1*limits, limits)) +
scale_color_manual(name = "Threshold",
values = c("up" = mycolors[1], "down" = mycolors[2], "not_sig" = "grey"),
labels = c("Down-regulated", "Not significant FC", "Up-regulated")) +
theme(legend.position = "right")
if (length(labels) != 0){
volcano <- volcano + geom_text_repel(aes(label=ifelse(threshold != "not_sig", as.character(labels),'')),
hjust=0, vjust=0,
size = 3)
}
if(out_path != "none"){
print(paste("Saving plot to ", out_path, "_volcano.png", sep = ""))
ggsave(paste(out_path, "_volcano.png", sep = ""),
plot = volcano)
}
volcano
}
# p_vals <- ttest_by_column(working_data, working_data$treatment)
# adj_p_vals <- p.adjust(p_vals$p_values, method = "fdr")
# log2FC <- log2_foldchange(working_data, working_data$treatment)
# myvolcano_df <- cbind(p_vals, adj_p_vals, log2FC)
# myvolcano_df$log2_foldchange[3] <- 0.1
# volcano_plot(myvolcano_df,
#              significance_col = myvolcano_df$p_values,
#              foldchange_col = myvolcano_df$log2_foldchange,
#              foldchange = 0.05,
#              labels = 1:nrow(myvolcano_df))
source("lipidome_comparison_hypothesis_testing.R")
## hypothesis testing
meat_ttest <- ttest_by_column(meat_tech, meat_tech$Group)
## hypothesis testing
test <- subset(meat_tech, meat_tech$Group != "wild")
meat_ttest <- ttest_by_column(test, test$Group)
## hypothesis testing
meat_vs_fish <- subset(meat_tech, meat_tech$Group != "wild")
p_meat_vs_fish <- ttest_by_column(test, test$Group)
log2_meat_vs_fish <- log2_foldchange(meat_vs_fish, meat_vs_fish$Group)
warnings()
log2_meat_vs_fish
padj_meat_vs_fish <- p.adjust(p_meat_vs_fish$p_values, method = "fdr")
## hypothesis testing
meat_vs_fish <- subset(meat_tech, meat_tech$Group != "wild")
p_meat_vs_fish <- ttest_by_column(meat_vs_fish, meat_vs_fish$Group)
log2_meat_vs_fish <- log2_foldchange(meat_vs_fish, meat_vs_fish$Group)
padj_meat_vs_fish <- p.adjust(p_meat_vs_fish$p_values, method = "fdr")
myvolcano <- cbind(p_meat_vs_fish, log2_meat_vs_fish, padj_meat_vs_fish)
volcano_plot(myvolcano, significance_col = myvolcano$p_values, foldchange_col = myvolcano$log2_foldchange)
volcano_plot(myvolcano, significance_col = myvolcano$p_values, foldchange_col = myvolcano$log2_foldchange, foldchange = 1)
