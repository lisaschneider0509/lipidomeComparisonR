xtickslab.rt = 45)
contrib_pc <- ggarrange(plotlist = list(cpc1, cpc2),
nrow = 1,
ncol = 2,
widths = c(1, 1),
labels = c("A", "B"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(paste(plot_path, "contrib_pc_beef.png", sep = "/"),
contrib_pc,
device = "png",
width = 10,
height = 5)
# most contributional lipids
meat_var <- beef_pca$var
meat_contrib <- as.data.frame(meat_var$contrib)
pc1_contrib_table <- meat_contrib[order(meat_contrib$Dim.1, decreasing = TRUE),]
pc1_contrib <- rownames(pc1_contrib_table)[1:10]
pc2_contrib_table <- meat_contrib[order(meat_contrib$Dim.2, decreasing = TRUE),]
pc2_contrib <- rownames(pc2_contrib_table)[1:10]
beef_pca_sub <- subset(lipid_list, select = c("Sample", "Group", pc1_contrib, pc2_contrib))
############### Clustering #################################################################
### Clustering
meat_clust <- data.frame(Group = lipid_list$group)
meat_clust <- cbind(meat_clust, select_if(lipid_list, is.numeric))
rownames(meat_clust) <- lipid_list$SID
ptab <- hclust_performance_table(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra", "binary",
"minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
pplot <- hclust_performance_plot(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
"minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
ggsave(paste(plot_path, "clust_performance.png", sep = "/"),
pplot,
device = "png",
width = 7,
height = 5)
meat_dist <- dist(select_if(lipid_list, is.numeric), method = "manhattan")
meat_hclust <- hclust(meat_dist, method = "average")
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 20, height = 14, units = "cm", res = 3000)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_list$sample,
meat_clust$Group, sep = "-"))
dev.off()
hclust_heatmap(lipid_list,
dist_method = "manhattan",
hclust_method = "average",
row_names = meat_clust$Group,
out_path = paste(plot_path, "hclust_heat.png", sep = "/"))
new_lipid_list <- select_if(lipid_list, is.numeric)
new_lipid_list <- cbind(lipid_list$Group, new_lipid_list)
heatmap <- hclust_heatmap_interactive(new_lipid_list,
dist_method = "manhattan",
hclust_method = "average",
row_names = lipid_list$Bio_replicate
)
hclust_map <- hclust_heatmap_interactive(meat_clust,
dist_method = "manhattan",
hclust_method = "average", out_path = "heatmaply.png")
# t_lipid_list <- as.data.frame(t(select_if(lipid_list, is.numeric)))
# colnames(t_lipid_list) <- lipid_list$Bio_replicate
#
# pplot2 <- hclust_performance_plot(t_lipid_list,
#                                  dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
#                                                   "minkowski"),
#                                  hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
#                                                     "median", "centroid"))
#
#
# lipid_hclust <- hclust(dist(t_lipid_list, method = "manhattan"), method = "average")
# hclust_dendrogram(lipid_hclust)
#################################################################################
############## Beef univariate ##################################################
p_beef <- one_sample_test_by_col(beef, beef$nutrition, method = t.test)
adj_beef <- p.adjust(p_beef$p_values, method = "fdr")
fc_beef <- log2_foldchange(beef,
beef$nutrition,
control_group = "stall",
test_group = "grazing")
beef_volcano <- data.frame(p_value = p_beef, adj_p_value = adj_beef, log2_foldchange = fc_beef)
vp <- volcano_plot(beef_volcano,
foldchange_col = beef_volcano$log2_foldchange,
significance_col = beef_volcano$adj_p_value,
foldchange = 1,
significance = 0.05)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = vp,
device = "png",
width = 10,
height = 5
)
beef_biplot <- biplot_ggplot2(beef, groups = "nutrition", loadings = FALSE, ellipse = FALSE, scale = TRUE, title = "Scores plot of beef")
beef_biplot <- biplot_ggplot2(beef, groups = "nutrition", loadings = FALSE, ellipse = FALSE, scale = TRUE, title = "Scores plot of beef")
ggsave(paste(plot_path, "biplot_beef.png", sep = "/"), beef_biplot, device = "png",
height = 5, width = 7)
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_data_imputed.csv", sep = ""),
row.names = 1)
lipidr_list
list.files(data_dir)
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""),
row.names = 1)
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""),
row.names = 1)
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$replicate
colnames(lipidr_list)
colnames(lipidr_matrix) <- lipidr_list$Replicate
annotation_df <- subset(lipidr_list, select = c("Replicate", "Group", "Sample", "Nutrition"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(sample = annotation_data$Sample,
nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "sample")
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(sample = annotation_data$Sample,
nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_data, map, by = "sample")
annotation_df <- left_join(annotation_data, map, by = "Sample")
annotation_data
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
annotation_df <- subset(lipidr_list, select = c("Replicate"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(sample = annotation_data$Sample,
nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "sample")
annotation_df <- left_join(annotation_df, map, by = "Sample")
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(sample = annotation_data$Sample,
nutrition = annotation_data$Nutrition)
map
annotation_df <- left_join(annotation_df, map, by = "Sample")
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_df
annotation_df <- left_join(annotation_df, map, by = "Sample")
rlang::last_error()
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "Group", "ID", "Nutrition")
annotation_df
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$Replicate
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "Group", "ID", "Nutrition")
annotation_df
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
library(lipidr)
library(dplyr)
library(fgsea)
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
set.seed(1)
train_ind <- sample(seq_len(nrow(lipid_list)), size = 0.75*nrow(lipid_list))
train_data <- lipid_list#[train_ind, ]
test_data <- lipid_list[-train_ind, ]
X <- select_if(train_data, is.numeric)
Y <- train_data$group
summary(Y)
Y <- train_data$Group
summary(Y)
dim(X); length(Y)
XT <- select_if(test_data, is.numeric)
YT <- test_data$group
meat_pls <- splsda(X, Y, keepX = c(50,50)) # 1 Run the method
library(mixOmics)
source("lipidome_comparison_plsDA.R")
source("R/lipidome_comparison_plsDA.R")
source("R/lipidome_comparison_plsDA.R")
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
set.seed(1)
train_ind <- sample(seq_len(nrow(lipid_list)), size = 0.75*nrow(lipid_list))
train_data <- lipid_list#[train_ind, ]
test_data <- lipid_list[-train_ind, ]
X <- select_if(train_data, is.numeric)
Y <- train_data$Group
summary(Y)
dim(X); length(Y)
XT <- select_if(test_data, is.numeric)
YT <- test_data$group
meat_pls <- splsda(X, Y, keepX = c(50,50)) # 1 Run the method
x <- plot_pls_scores(meat_pls, title = "PLS-DA of meat - training data")
background <- background.predict(meat_pls, comp.predicted=2, dist = "max.dist")
list.keepX <- c(5:10, seq(5, 50, 2))
set.seed(2543) # for reproducibility here,
# to speed up the computational time, consider the cpu argument
# take ~ 4 min to run
tune_splsda <- tune.splsda(X, Y, ncomp = 5, validation = 'Mfold', folds = 2,
progressBar = FALSE, dist = 'max.dist',
test.keepX = list.keepX, nrepeat = 50, cpus = 2) #nrepeat 50-100 for better estimate
choice.ncomp <- tune_splsda$choice.ncomp$ncomp; choice.ncomp
choice.keepX <- tune_splsda$choice.keepX[1:choice.ncomp]; choice.keepX
plot(tune_splsda, col = viridis(n = 5, alpha = 0.5))
new_splsda <- splsda(X, Y, ncomp = choice.ncomp, keepX = choice.keepX)
perf_splsda2 <- perf(new_splsda, validation = "Mfold", folds = 2,
progressBar = FALSE, auc = TRUE, nrepeat = 100)
{par(mfrow = c(1, 1), cex.main = 1.2, family = "AvantGarde", col = "grey40", col.lab = "grey40", font.main = 1)
plot(perf_splsda2, col = viridis(n = 3))
title(main = "Performance of tuned PLS-DA")}
selectVar(new_splsda, comp = 1)$value
auc.plsda <- auroc(new_splsda, line.col = viridis(n = 3, alpha = 0.5))
tuned_pls <- plot_pls_scores(new_splsda,
title = "Tuned PLS-DA",
xlab = "component 1",
ylab = "component 2")
tuned_pls
ggsave(paste(plot_path, "tuned_pls-da.png", sep ="/" ),
tuned_pls,
device = "png",
width = 10,
height = 5)
#' @param title string. Plot title. Default = "Hierarchical clustering".
#' @param out_path string. Path to save plot to png. Default = to device.
#' @examples
#' US_clust <- hclust(dist(USArrests, method = "euclidean"), method = "average")
#' hclust_dendrogram(US_clust)
#' hclust_dendrogram(US_clust, labs = 1:nrow(USArrests))
#' \dontrun{
#' dir.create(paste(getwd(), "/examples", sep = ""), showWarnings = FALSE)
#' dir <- paste(getwd(), "/examples/USArrests", sep = "")
#' hclust_dendrogram(US_clust, out_path = dir)
hclust_dendrogram <- function(hclust_element,
labs = hclust_element$labels,
title = "Hierarchical clustering",
out_path = "none"){
out_name <- paste(out_path, "_dendrogram_", hclust_element$method, "_linkage.png", sep = "")
mycolors <- viridis::viridis(n = 4, begin = 0, end = 0)
linkage <- hclust_element$method
distance <- hclust_element$dist.method
subtitle <- paste(distance, "distance, ", linkage, "linkage", sep = " ")
func <- function(){
par(mfrow = c(1, 1), cex = 1)
plot(hclust_element, labels = labs,
xlab = "",
main = "", sub = "",
col = "black")
mtext(title, side=3, line=2, family = "AvantGarde", font = 1, cex = 1)
mtext(subtitle, side=3, line=0.5, family = "AvantGarde", font = 3, cex=0.8)
}
if(out_path != "none"){
print(paste("Saving to ", out_name))
png(filename = out_name, width = 1200, height = 600, unit = "px")
func()
dev.off()
}
else{
func()
}
}
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 20, height = 15, units = "cm", res = 150)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
dev.off()
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 1200, height = 600, unit = "px")
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 600, height = 300, unit = "px")
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
### load packages
{library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
# library(crmn)
# library(impute)
# library(imputeLCMD)
library(tibble) # data frame manipulation
library(tidyverse)
library(ggplot2)#, # plots
library(viridis) # colorblind save color schemes
# library(GGally) # paralell plot
# library(fmsb) # spider chart
# library(scales) # scale opacity of filling (alpha)
# library(ggpubr) # multiple plots on one page
# library(ggmosaic)
# library(ggrepel)
# library(factoextra)
# library(ggfortify) # biplot with ggplot
# library(corrplot)
# library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
source("R/lipidome_comparison_dataTransformaions.R")
source("R/lipidome_comparison_EDA.R")
source("R/lipidome_comparison_pca.R")
source("R/lipidome_comparison_clustering.R")
source("R/lipidome_comparison_hypothesis_testing.R")}
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
{
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
}
############## import lipid data #############################
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############### Clustering #################################################################
### Clustering
meat_clust <- data.frame(Group = lipid_data$Group)
meat_clust <- cbind(meat_clust, select_if(lipid_data, is.numeric))
rownames(meat_clust) <- lipid_data$Replicate
ptab <- hclust_performance_table(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra", "minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
pplot <- hclust_performance_plot(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
"minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
ggsave(paste(plot_path, "clust_performance.png", sep = "/"),
pplot,
device = "png",
width = 10,
height = 5)
meat_dist <- dist(select_if(lipid_data, is.numeric), method = "manhattan")
meat_hclust <- hclust(meat_dist, method = "average")
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 20, height = 20, units = "cm", res = 200)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
hclust_heatmap(lipid_data,
dist_method = "manhattan",
hclust_method = "average",
row_names = meat_clust$Group,
out_path = paste(plot_path, "hclust_heat.png", sep = "/"))
new_lipid_data <- select_if(lipid_data, is.numeric)
new_lipid_data <- cbind(lipid_data$Group, new_lipid_data)
heatmap <- hclust_heatmap_interactive(new_lipid_data,
dist_method = "manhattan",
hclust_method = "average",
row_names = lipid_data$Bio_replicate
)
hclust_map <- hclust_heatmap_interactive(meat_clust,
dist_method = "manhattan",
hclust_method = "average", out_path = "heatmaply.png")
# t_lipid_data <- as.data.frame(t(select_if(lipid_data, is.numeric)))
# colnames(t_lipid_data) <- lipid_data$Bio_replicate
#
# pplot2 <- hclust_performance_plot(t_lipid_data,
#                                  dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
#                                                   "minkowski"),
#                                  hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
#                                                     "median", "centroid"))
#
#
# lipid_hclust <- hclust(dist(t_lipid_data, method = "manhattan"), method = "average")
# hclust_dendrogram(lipid_hclust)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
### load packages
{library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
# library(crmn)
# library(impute)
# library(imputeLCMD)
library(tibble) # data frame manipulation
library(tidyverse)
library(ggplot2)#, # plots
library(viridis) # colorblind save color schemes
# library(GGally) # paralell plot
# library(fmsb) # spider chart
# library(scales) # scale opacity of filling (alpha)
# library(ggpubr) # multiple plots on one page
# library(ggmosaic)
# library(ggrepel)
# library(factoextra)
# library(ggfortify) # biplot with ggplot
# library(corrplot)
# library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
source("R/lipidome_comparison_dataTransformaions.R")
source("R/lipidome_comparison_EDA.R")
source("R/lipidome_comparison_pca.R")
source("R/lipidome_comparison_clustering.R")
source("R/lipidome_comparison_hypothesis_testing.R")}
### load packages
{library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
# library(crmn)
# library(impute)
# library(imputeLCMD)
library(tibble) # data frame manipulation
library(tidyverse)
library(ggplot2)#, # plots
library(viridis) # colorblind save color schemes
# library(GGally) # paralell plot
# library(fmsb) # spider chart
# library(scales) # scale opacity of filling (alpha)
# library(ggpubr) # multiple plots on one page
# library(ggmosaic)
# library(ggrepel)
# library(factoextra)
# library(ggfortify) # biplot with ggplot
# library(corrplot)
# library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
source("R/lipidome_comparison_dataTransformaions.R")
source("R/lipidome_comparison_EDA.R")
source("R/lipidome_comparison_clustering.R")
source("R/lipidome_comparison_hypothesis_testing.R")}
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
{
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
}
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############### Clustering #################################################################
### Clustering
meat_clust <- data.frame(Group = lipid_data$Group)
meat_clust <- cbind(meat_clust, select_if(lipid_data, is.numeric))
rownames(meat_clust) <- lipid_data$Replicate
ptab <- hclust_performance_table(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra", "minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
pplot <- hclust_performance_plot(meat_clust,
dist_methods = c("euclidean", "maximum", "manhattan", "canberra",
"minkowski"),
hclust_methods = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
"median", "centroid"))
ggsave(paste(plot_path, "clust_performance.png", sep = "/"),
pplot,
device = "png",
width = 10,
height = 5)
meat_dist <- dist(select_if(lipid_data, is.numeric), method = "manhattan")
meat_hclust <- hclust(meat_dist, method = "average")
png(paste(plot_path, "dendrogram.png", sep = "/"), width = 20, height = 20, units = "cm", res = 200)
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
dev.off()
hclust_dendrogram(meat_hclust,
labs = paste(lipid_data$Sample,
meat_clust$Group, sep = "-"))
