flip_df(tf_data)
#' Flip data frame
#'
#' @description `flip_df` takes a data frame with the columns c(Compound, Type, Filename, Status, Group, Area)
#' and transposes it, so that each area value is assigned to one compound (columnwise) and one SID (rowwise).
#' Additionally the group variable is saved to each sample.  Suitable for preprocessed csvs generated by Thermo Fisher Tracefinder.
#' @param df data frame. Contains the columns c(Compound, Type, Filename, Status, Group, Area).
#' @example
#' dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
#' tf_data <- read.csv(dir)
#' flip_df(tf_data)
flip_df <- function(df){
sample <- levels(df$Filename)
new_df <- data.frame()
for(i in 1:length(sample)){
buffer <- subset(df, Filename == sample[i])
buffer_df <- subset(buffer, select = c(Compound, Area))
t_buffer_df <- pretty_transpose(buffer_df)
t_buffer_df <- add_column(t_buffer_df, SID = sample[i], .before = 1)
# t_buffer_df <- add_column(t_buffer_df, Group = buffer$Group[1], .after = 1)
# print(length(new_df))
print(t_buffer_df)
# new_df <- rbind(new_df, t_buffer_df)
# rownames(new_df)[i] <- i
}
new_df
}
flip_df(tf_data)
#' Flip data frame
#'
#' @description `flip_df` takes a data frame with the columns c(Compound, Type, Filename, Status, Group, Area)
#' and transposes it, so that each area value is assigned to one compound (columnwise) and one SID (rowwise).
#' Additionally the group variable is saved to each sample.  Suitable for preprocessed csvs generated by Thermo Fisher Tracefinder.
#' @param df data frame. Contains the columns c(Compound, Type, Filename, Status, Group, Area).
#' @example
#' dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
#' tf_data <- read.csv(dir)
#' flip_df(tf_data)
flip_df <- function(df){
sample <- levels(df$Filename)
new_df <- data.frame()
for(i in 1:length(sample)){
buffer <- subset(df, Filename == sample[i])
buffer_df <- subset(buffer, select = c(Compound, Area))
t_buffer_df <- pretty_transpose(buffer_df)
t_buffer_df <- add_column(t_buffer_df, SID = sample[i], .before = 1)
# t_buffer_df <- add_column(t_buffer_df, Group = buffer$Group[1], .after = 1)
# print(length(new_df))
print(ncol(t_buffer_df))
# new_df <- rbind(new_df, t_buffer_df)
# rownames(new_df)[i] <- i
}
new_df
}
flip_df(tf_data)
#' Flip data frame
#'
#' @description `flip_df` takes a data frame with the columns c(Compound, Type, Filename, Status, Group, Area)
#' and transposes it, so that each area value is assigned to one compound (columnwise) and one SID (rowwise).
#' Additionally the group variable is saved to each sample.  Suitable for preprocessed csvs generated by Thermo Fisher Tracefinder.
#' @param df data frame. Contains the columns c(Compound, Type, Filename, Status, Group, Area).
#' @example
#' dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
#' tf_data <- read.csv(dir)
#' flip_df(tf_data)
flip_df <- function(df){
sample <- levels(df$Filename)
new_df <- data.frame()
for(i in 1:length(sample)){
buffer <- subset(df, Filename == sample[i])
buffer_df <- subset(buffer, select = c(Compound, Area))
t_buffer_df <- pretty_transpose(buffer_df)
t_buffer_df <- add_column(t_buffer_df, SID = sample[i], .before = 1)
# t_buffer_df <- add_column(t_buffer_df, Group = buffer$Group[1], .after = 1)
# print(length(new_df))
print(ncol(t_buffer_df))
# new_df <- rbind(new_df, t_buffer_df)
# rownames(new_df)[i] <- i
}
new_df
}
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
#' Flip data frame
#'
#' @description `flip_df` takes a data frame with the columns c(Compound, Type, Filename, Status, Group, Area)
#' and transposes it, so that each area value is assigned to one compound (columnwise) and one SID (rowwise).
#' Additionally the group variable is saved to each sample.  Suitable for preprocessed csvs generated by Thermo Fisher Tracefinder.
#' @param df data frame. Contains the columns c(Compound, Type, Filename, Status, Group, Area).
#' @example
#' dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
#' tf_data <- read.csv(dir)
#' flip_df(tf_data)
flip_df <- function(df){
sample <- levels(df$Filename)
new_df <- data.frame()
for(i in 1:length(sample)){
buffer <- subset(df, Filename == sample[i])
buffer_df <- subset(buffer, select = c(Compound, Area))
t_buffer_df <- pretty_transpose(buffer_df)
t_buffer_df <- add_column(t_buffer_df, SID = sample[i], .before = 1)
t_buffer_df <- add_column(t_buffer_df, Group = buffer$Group[1], .after = 1)
new_df <- rbind(new_df, t_buffer_df)
rownames(new_df)[i] <- i
}
new_df
}
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
new_meat
meat_matrix <- flip_df_for_lipidr(meat_target)
meat_annotation <- read.csv(annotation_path)
meat <- as_lipidomics_experiment(meat_matrix)
meat_matrix
### load packages
{
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(impute)
library(imputeLCMD)
library(ggplot2)#, # plots
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel)
library(factoextra)
library(ggfortify) # biplot with ggplot
library(corrplot)
library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
library(lipidr) # lipid set enrichment
}
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set paths
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
## meat data
### data processing
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
meat_datameat_data <- subset(meat_data, Status == "Processed")
meat_data[meat_data=='N/F'] <- NA
meat_data$Area <- as.numeric(as.character(meat_data$Area))
meat_target <- subset(meat_data, Type == "Target Compound")
# meat_standard <- subset(meat_data, Type == "Internal Standard")
meat_target <- meat_data
meat_target <- subset(meat_target, select = c("Compound", "Filename", "Area"))
meat_target$Filename <- sub(".*probe","sample", meat_target$Filename)
meat_target$Filename <- sub("\\.*pos2","2", meat_target$Filename)
meat_target$Filename <- sub("\\.*pos","1", meat_target$Filename)
meat_target <- subset(meat_target, str_detect(meat_target$Filename, "sample") == TRUE)
meat_matrix <- flip_df_for_lipidr(meat_target)
meat_annotation <- read.csv(annotation_path)
meat <- as_lipidomics_experiment(meat_matrix)
tf_data <- read.csv(dir)
flip_df(tf_data)
tf_data <- read.csv(dir)
tf_data <- flip_df(tf_data)
meat <- as_lipidomics_experiment(tf_data)
meat <- as_lipidomics_experiment(as.matrix(tf_data))
install.packages("LipidMS")
install.packages("LipidMSdata")
tf_data <- read.csv(file = paste(getwd(), "/example_data/test.csv"))
tf_data <- read.csv(file = paste(getwd(), "/example_data/test.csv", sep = ""))
tf_data <- flip_df(tf_data)
tf_data <- read.csv(file = paste(getwd(), "/example_data/test.csv", sep = ""))
tf_data <- flip_df(tf_data)
dir <- paste(getwd(), "/example_data/test.csv", sep = "")
tf_data <- read.csv(dir)
flip_df(tf_data)
lipidr::data_normalized
tf_data <- read.csv(file = paste(getwd(), "/example_data/test.csv", sep = ""))
tf_data <- flip_df(tf_data)
tf_data
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data
meat
plot_samples(meat)
plot_samples(meat, type = "tic", log = TRUE)
plot_molecules(meat, "sd", measure = "Retention Time", log = FALSE)
plot_lipidclass(meat, "boxplot")
tf_data
tf_data$lipids
d_summarized = summarize_transitions(meat, method = "average")
plot_samples(meat, type = "boxplot", log = TRUE)
meat_normalized = normalize_pqn(meat, measure = "Area", exclude = "blank", log = TRUE)
meat_mormalized
meat_normalized
meat_normalized_istd = normalize_istd(meat, measure = "Area", exclude = "blank", log = TRUE)
mvaresults = mva(meat_normalized, measure="Area", method="PCA")
mvaresults <- mva(meat_normalized, measure="Area", method="PCA")
mvaresults
plot_mva(mvaresults, color_by="group", components = c(1,2))
getwd()
meat <- as_lipidomics_experiment(as.matrix(tf_data))
meat <- add_sample_annotation(meat, paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
meat <- add_sample_annotation(meat, paste(getwd(), "tf_example_annotation.csv", sep = ""))
read.csv(paste(getwd(), "tf_example_annotation.csv", sep = ""))
list.files(paste(getwd(), "/example_data", sep = ""))
read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- add_sample_annotation(meat, paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
annotation_data
annotation_data$Sample
meat <- add_sample_annotation(meat, annotation_data)
meat_matrix <- flip_df_for_lipidr(meat_target)
meat_annotation <- read.csv(annotation_path)
tf_data <- flip_df(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
meat <- add_sample_annotation(meat, annotation_data)
annotation_data
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
annotation_data$Sample <- as.factor(annotation_data$Sample)
meat <- as_lipidomics_experiment(as.matrix(tf_data))
meat <- add_sample_annotation(meat, annotation_data)
tf_data
list.files(path = "/example_data")
list.files(paste(getwd(), "/example_data", sep = "")
)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df(tf_data)
tf_data
tf_data <- flip_df(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data
meat
meat <- add_sample_annotation(meat, annotation_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data
meat
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data <- flip_df(tf_data)
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
tf_data <- flip_df(tf_data)
meat <- as_lipidomics_experiment(as.matrix(tf_data))
{
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(impute)
library(imputeLCMD)
library(ggplot2)#, # plots
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel)
library(factoextra)
library(ggfortify) # biplot with ggplot
library(corrplot)
library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
library(lipidr) # lipid set enrichment
}
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set paths
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
## meat data
### data processing
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
# meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
# meat_datameat_data <- subset(meat_data, Status == "Processed")
# meat_data[meat_data=='N/F'] <- NA
# meat_data$Area <- as.numeric(as.character(meat_data$Area))
# meat_target <- subset(meat_data, Type == "Target Compound")
# # meat_standard <- subset(meat_data, Type == "Internal Standard")
#
# meat_target <- meat_data
#
# meat_target <- subset(meat_target, select = c("Compound", "Filename", "Area"))
#
# meat_target$Filename <- sub(".*probe","sample", meat_target$Filename)
# meat_target$Filename <- sub("\\.*pos2","2", meat_target$Filename)
# meat_target$Filename <- sub("\\.*pos","1", meat_target$Filename)
#
# meat_target <- subset(meat_target, str_detect(meat_target$Filename, "sample") == TRUE)
#
# meat_matrix <- flip_df_for_lipidr(meat_target)
# meat_annotation <- read.csv(annotation_path)
meat <- as_lipidomics_experiment(as.matrix(meat_data))
flip_df(meat_data)
x <- flip_df(meat_data)
meat <- as_lipidomics_experiment(as.matrix(x))
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
tf_data <- flip_df(tf_data)
meat <- as_lipidomics_experiment(as.matrix(tf_data))
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
tf_data[tf_data=='N/F'] <- NA
tf_data <- flip_df(tf_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation.csv", sep = ""))
meat <- as_lipidomics_experiment(as.matrix(tf_data))
tf_data
dir <- paste(getwd(), "/example_data/tracefinder_example2.csv", sep = "")
tf_data <- read.csv(dir)
tf_data
meat <- as_lipidomics_experiment(as.matrix(tf_data))
meat <- add_sample_annotation(meat, annotation_data)
annotation_data <- read.csv(paste(getwd(), "/example_data/tf_example_annotation2.csv", sep = ""))
meat <- add_sample_annotation(meat, annotation_data)
meat[1]
metadata(meat]
metadata(meat)
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
tf_data
tf_data <- read.csv(dir)[-1]
tf_data
meat <- as_lipidomics_experiment(as.matrix(tf_data))
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)[-1]
flip_df_for_lipidr(tf_data)
### load packages
{
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(impute)
library(imputeLCMD)
library(ggplot2)#, # plots
library(tibble) # data frame manipulation
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel)
library(factoextra)
library(ggfortify) # biplot with ggplot
library(corrplot)
library(FactoMineR)
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive ggplots
library(htmlwidgets) # save plotly-plots as html
library(dendextend)
library(lipidr) # lipid set enrichment
}
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set paths
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
## meat data
### data processing
{
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
meat_datameat_data <- subset(meat_data, Status == "Processed")
meat_data[meat_data=='N/F'] <- NA
meat_data$Area <- as.numeric(as.character(meat_data$Area))
meat_target <- subset(meat_data, Type == "Target Compound")
# meat_standard <- subset(meat_data, Type == "Internal Standard")
meat_target <- meat_data
meat_target <- subset(meat_target, select = c("Compound", "Filename", "Area"))
meat_target$Filename <- sub(".*probe","sample", meat_target$Filename)
meat_target$Filename <- sub("\\.*pos2","2", meat_target$Filename)
meat_target$Filename <- sub("\\.*pos","1", meat_target$Filename)
meat_target <- subset(meat_target, str_detect(meat_target$Filename, "sample") == TRUE)
meat_matrix <- flip_df_for_lipidr(meat_target)
meat_annotation <- read.csv(annotation_path)
}
as_lipidomics_experiment(meat_matrix)
meat_matrix
rownames(meat_matrix) <- meat_matrix$compound
as_lipidomics_experiment(meat_matrix)
as_lipidomics_experiment(tf_data)
tf_data
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- flip_df_for_lipidr(tf_data)
tf_data
dir <- paste(getwd(), "/example_data/tracefinder_example.csv", sep = "")
tf_data <- read.csv(dir)
flip_df_for_lipidr(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
as_lipidomics_experiment(tf_data)
colnames(tf_data)[1]
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
colnames(tf_data)[1] <- "lipids"
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example2.csv", sep = ""))
as_lipidomics_experiment(tf_data)
tf_data
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
tf_data
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
tf_data
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
colnames(tf_data)[1] <- "lipids"
as_lipidomics_experiment(tf_data)
tf_data <- read.csv(paste(getwd(), "/example_data/tracefinder_example.csv", sep = ""))
tf_data <- flip_df_for_lipidr(tf_data)
colnames(tf_data)[1] <- "lipids"
rownames(tf_data) <- tf_data$lipids
