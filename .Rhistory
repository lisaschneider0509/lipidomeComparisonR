}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = ""){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == ""){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
}
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = ""){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == ""){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
op <- 1
op == 1
op <- out_path == 1
out_path == 1
out_path <- 1
op <- out_path == 1
op
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
op <- out_path == 1
if(op == TRUE){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
print(out_path)
op <- out_path == 1
print(op)
if(op == TRUE){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment")
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
## plots for normal distribution
qqplot_by_factor(working_data, "treatment")
qqplot_by_factor(iris, "Sepcies")
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
print(numeric_df)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
qqplot_by_factor(iris, "Sepcies")
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Sepcies")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
print("Test")
}
}
qqplot_by_factor(iris, "Sepcies")
iris[[Species]]
iris$Species
iris[[Species]]
working_data[["treatment"]]
iris[["Species"]]
qqplot_by_factor(iris, "Species")
#' Print one qqplot for each variable and group
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
dev.off()
}
}
}
qqplot_by_factor(iris, "Species")
qqplot_by_factor(iris, "Species", "/iris/")
getwd()
qqplot_by_factor(iris, "Species", "/plots/iris")
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
#' qqplot_by_factor(iris, "Species", "/plots/iris")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
dev.off()
}
}
}
qqplot_by_factor(iris, "Species", "/plots/iris")
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
#' qqplot_by_factor(iris, "Species", "/iris")
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
dev.off()
}
}
}
qqplot_by_factor(iris, "Species", "/iris")
qqplot_by_factor(iris, "Species", plot_path)
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
#' qqplot_by_factor(iris, "Species", plot_path)
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
print(input_df[[factor]])
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
dev.off()
}
}
}
qqplot_by_factor(iris, "Species", plot_path)
#'
#' @description `qqplot_by_factor` takes a data frame and prints a qq-plot for each group and varible
#' @details Take a data frame and prints a qq-plot for each group and varible.
#' @param input_df a data frame with at least one factor column
#' @param factor a string with the column name to group by
#' @param out_path optional string.
#' If out path is given, the generated plots are saved to a pdf document with the given name.
#' @example
#' qqplot_by_factor(iris, "Species")
#' qqplot_by_factor(iris, "Species", plot_path)
qqplot_by_factor <- function(input_df, factor, out_path = 1){
levels <- levels(input_df[[factor]])
numeric_df <- dplyr::select_if(input_df, is.numeric)
if(out_path == 1){
for (i in 1:length(levels)){
# pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
# dev.off()
}
}
else{
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 1:ncol(numeric_df)){
col_name <- colnames(numeric_df)[j]
qqnorm(numeric_df[,j][input_df[[factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(numeric_df[,j][input_df[[factor]] == levels[i]])}
dev.off()
}
}
}
qqplot_by_factor(iris, "Species", plot_path)
getwd()
pdf("plots")
pdf("/plots")
pdf("/plots/new")
pdf("/plots/new.pdf")
pdf("/home/lisa/FH/Masterarbeit/LipidomeComparison/plots/new.pdf")
dev.off()
dev.off()
dir <- paste(getwd(), "/iris", sep = "")
dir
dir <- paste(getwd(), "/test_iris", sep = "")
qqplot_by_factor(iris, "Species", dir)
dir <- paste(getwd(), "/test/iris", sep = "")
qqplot_by_factor(iris, "Species", dir)
dir <- paste(getwd(), "/plots/iris", sep = "")
qqplot_by_factor(iris, "Species", dir)
