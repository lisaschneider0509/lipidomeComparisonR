for (j in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[j]
qqnorm(input_df[,j][input_df[[by_factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(input_df[,j][input_df[[by_factor]] == levels[i]])
}
dev.off()
}
}
## histogram by factor
# print one pdf document with histograms and density lines per factor for all lipids
histogram_by_factor <- function(input_df, by_factor, out_path){
levels <- levels(input_df[[by_factor]])
for (i in 1:length(levels)){
pdf(paste(plot_name, "_histogram_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[j]
hist(input_df[,j][input_df[[by_factor]] == levels[i]],
main = col_name,
cex.main = 0.8,
xlab = NULL)
lines(density(input_df[,j][input_df[[by_factor]] == levels[i]]))
lines(density(input_df[,j][input_df[[by_factor]] == levels[i]], adjust = 1.5), lty = 2)
}
dev.off()
}
}
## boxplot by factor
boxplot_by_factor <- function(input_df, by_factor, out_path){
pdf(paste(plot_name, "_boxplot", ".pdf", sep = ""))
par(mfrow=c(3,3))
for (i in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[i]
boxplot(input_df[,i] ~ input_df[[by_factor]],
main = col_name,
cex.main = 0.8,
xlab = NULL,
ylab = NULL)}
dev.off()}
## shapiro-wilk by factor
shapiro_by_factor <- function(input_df, by_factor){
shapiro_statistic <- aggregate(input_df[-(1:3)],
by = list(input_df[[by_factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(input_df[-(1:3)],
by = list(input_df[[by_factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all[order(shapiro_all[,2]), ]
}
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
shapiro_by_treatment
source("lipidome_comparison_functions.R")
### load packages
library(gridExtra)
library(stringr)
library(ggplot2)
library(tidyr)
library(data.table)
library(textshape)
library(tibble)
library(RVAideMemoire)
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
t_lipid_data <- read_transpose(input_path)
t_test_data <- read_transpose(test_path)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
## summary biological & technical replicates
means_biol <- calc_biol_rep(working_data, mean)
means_tech <- calc_tech_rep(working_data, mean)
sd_biol <- calc_biol_rep(working_data, sd)
sd_tech <- calc_tech_rep(working_data, sd)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
histogram_by_factor(working_data, "treatment", plot_name)
boxplot_by_factor(working_data, "treatment", plot_name)
## test for normal distribution
### Don't use with multi modal data --> check histogram and qq plots first
shapiro_all <- lapply(working_data[-(1:3)], shapiro.test)
shapiro_all <- sapply(shapiro_all, `[`, c("statistic","p.value"))
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
### Install packages
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tidyr")
# install.packages("data.table")
# install.packages("textshape")
# BiocManager::install("mixOmics")
# BiocManager::install("RVAideMemoire")
install.packages("MASS")
library(MASS)
### Install packages
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tidyr")
# install.packages("data.table")
# install.packages("textshape")
# BiocManager::install("mixOmics")
# BiocManager::install("RVAideMemoire")
# install.packages("MASS")
install.packages("psych")
library(psych)
## check for correlations between lipids
psych::cor.plot(working_data)
working_data[,-(1:3)]
wd <- working_data[sapply(working_data, is.numeric)
]
wd
## remove non numeric columns
remove_non_numeric <- function(input_df){
working_data[sapply(working_data, is.numeric)]
}
wd <- remove_non_numeric(working_data)
wd
is.numeric(working_data)
library(dplyr)
dplyr::select_if(working_data, is.numeric)
#### R script with functions for lipidome comparison ####
### Data handeling
## read and transpose data
read_transpose <- function(input_path){
input_df <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
t_input_df <- data.table::transpose(as.data.table(input_df), make.names = 1)
t_input_df <- as.data.frame(t_input_df)
row.names(t_input_df) <- colnames(input_df[-1])
t_input_df
}
## get meta information from sample name
SID_to_metadata <- function(input_df){
n_sep <- mean(stringr::str_count(row.names(input_df), "_"))
meta_info <- read.table(text = row.names(input_df), sep = "_")
if(n_sep == 2){
biol_rep <- paste(meta_info$V1, meta_info$V2, sep = "_")
treatment <- meta_info$V1
input_df <- tibble::add_column(input_df, biol_replicate = biol_rep, .before = 1)
input_df <- tibble::add_column(input_df, treatment = treatment, .before = 1)
input_df <- tibble::add_column(input_df, experiment = NA, .before = 1)
} else if(n_sep == 3){
biol_rep <- paste(meta_info$V1, meta_info$V2, meta_info$V3, sep = "_")
treatment <- meta_info$V2
experiment <- meta_info$V1
input_df <- tibble::add_column(input_df, biol_replicate = biol_rep, .before = 1)
input_df <- tibble::add_column(input_df, treatment = treatment, .before = 1)
input_df <- tibble::add_column(input_df, experiment = experiment, .before = 1)
} else{
print("Wrong format")
}
}
## remove non numeric columns
remove_non_numeric <- function(input_df){
working_data[lapply(working_data, is.numeric)]
}
### Exploratory data analysis
## calculate by biological replicate
# grouping by treatment calculates the mean/sd/etc. over all biological replicates
calc_biol_rep <- function(input_df, funct){
as.data.frame(
aggregate(dplyr::select_if(input_df, is.numeric),
by=list(input_df$treatment),
FUN=funct)
)
}
## calculate by technical replicate
# grouping by biological replicate calculates the mean over all technical replicates
calc_tech_rep <- function(input_df, funct){
as.data.frame(
aggregate(dplyr::select_if(input_df, is.numeric),
by=list(input_df$biol_replicate),
FUN=funct)
)
}
### Graphical exploratory data analysis
## qqplot by factor
# print one pdf document with qq-plotsper factor for all lipids
qqplot_by_factor <- function(input_df, by_factor, out_path){
levels <- levels(input_df[[by_factor]])
for (i in 1:length(levels)){
pdf(paste(out_path, "_qqplot_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[j]
qqnorm(input_df[,j][input_df[[by_factor]] == levels[i]],
main = paste(col_name, levels[i], sep = " "),
cex.main = 0.8)
qqline(input_df[,j][input_df[[by_factor]] == levels[i]])
}
dev.off()
}
}
## histogram by factor
# print one pdf document with histograms and density lines per factor for all lipids
histogram_by_factor <- function(input_df, by_factor, out_path){
levels <- levels(input_df[[by_factor]])
for (i in 1:length(levels)){
pdf(paste(plot_name, "_histogram_", levels[i], ".pdf", sep = ""))
par(mfrow=c(3,3))
for (j in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[j]
hist(input_df[,j][input_df[[by_factor]] == levels[i]],
main = col_name,
cex.main = 0.8,
xlab = NULL)
lines(density(input_df[,j][input_df[[by_factor]] == levels[i]]))
lines(density(input_df[,j][input_df[[by_factor]] == levels[i]], adjust = 1.5), lty = 2)
}
dev.off()
}
}
## boxplot by factor
boxplot_by_factor <- function(input_df, by_factor, out_path){
input_df <-
pdf(paste(plot_name, "_boxplot", ".pdf", sep = ""))
par(mfrow=c(3,3))
for (i in 4:ncol(input_df[,1: ncol(input_df)])){
col_name <- colnames(input_df)[i]
boxplot(input_df[,i] ~ input_df[[by_factor]],
main = col_name,
cex.main = 0.8,
xlab = NULL,
ylab = NULL)}
dev.off()}
## shapiro-wilk by factor
shapiro_by_factor <- function(input_df, by_factor){
shapiro_statistic <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[by_factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$statistic)})
shapiro_statistic <- tibble::add_column(shapiro_statistic,
value = "W",
.before = 1)
shapiro_pvalue <- aggregate(dplyr::select_if(input_df, is.numeric),
by = list(input_df[[by_factor]]),
FUN = function(x) {y <- shapiro.test(x); c(y$p.value)})
shapiro_pvalue <- tibble::add_column(shapiro_pvalue,
value = "p-Value",
.before = 1)
shapiro_all <- rbind(shapiro_statistic, shapiro_pvalue)
shapiro_all[order(shapiro_all[,2]), ]
}
### load packages
library(gridExtra)
library(stringr)
library(ggplot2)
library(tidyr)
library(data.table)
library(textshape)
library(tibble)
library(RVAideMemoire)
library(MASS)
library(psych)
library(dplyr)
source("lipidome_comparison_functions.R")
# set ggplot theme
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
input_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/test2.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/test_data", sep = "")
## load & transform data
t_lipid_data <- read_transpose(input_path)
t_test_data <- read_transpose(test_path)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
working_data_numeric <- working_data[sapply(working_data, is.numeric)]
## summary biological & technical replicates
means_biol <- calc_biol_rep(working_data, mean)
means_tech <- calc_tech_rep(working_data, mean)
sd_biol <- calc_biol_rep(working_data, sd)
sd_tech <- calc_tech_rep(working_data, sd)
## plots for normal distribution
qqplot_by_factor(working_data, "treatment", plot_name)
histogram_by_factor(working_data, "treatment", plot_name)
boxplot_by_factor(working_data, "treatment", plot_name)
## test for normal distribution
### Don't use with multi modal data --> check histogram and qq plots first
shapiro_all <- lapply(working_data_numeric, shapiro.test)
shapiro_all <- sapply(shapiro_all, `[`, c("statistic","p.value"))
shapiro_by_treatment <- shapiro_by_factor(working_data, "treatment")
## check for correlations between lipids
psych::cor.plot(dplyr::select_if(input_df, is.numeric))
shapiro_by_treatment
## check for correlations between lipids
psych::cor.plot(dplyr::select_if(working_data, is.numeric))
dev.off()
## check for correlations between lipids
psych::cor.plot(dplyr::select_if(working_data, is.numeric))
### import packages ###
library(psych)
### import data ###
setwd("<your workingdirectory>")
# test_data <- read.csv("myheader.csv", header = T, sep = ";")
### Overview and measures by factor###
table(iris$Species) # observation numbers by factor
tapply(iris$Sepal.Length, iris$Species, summary)
tapply(iris$Sepal.Length, iris$Species, sd)
tapply(iris$Sepal.Length, iris$Species, IQR)
#### modality and normality ###
input_data <- iris$Sepal.Length # change input data here
input_title <- "Sepal length"
input_x <- "Sepal length"
input_y <- "Sepal length"
{hist(input_data, freq=FALSE, main = NULL, xlab = NULL, ylab = NULL) # histogram
lines(density(input_data, na.rm = T), lwd=2) # histogram mit density kurve
lines(density(input_data,adjust=1.5, na.rm = T),col=2,lwd=2) # Doppelte Bandbreite
title(input_title, xlab = input_x)}
plot(ecdf(input_data), main = input_title) # ecdf plot
{qqnorm(input_data, main = input_title) # qq-plot auf Normalverteilung
qqline(input_data, col = 2)} # linie der erwarteten werte aus qq
shapiro.test(input_data) # test for normality (unimodal data only)
### boxplot by factor ###
boxplot(Sepal.Length ~ Species, data = iris) # unimodal data only
title(main = "Iris", xlab = "Species", ylab = "Length")
### by age ###
input_u35 <- age_under35$BMI
input_u55 <- age_under55$BMI
input_o55 <- age_55plus$BMI
age_title <- "BMI"
age_x <- "age"
age_y <- "BMI"
boxplot(input_u35, input_u55, input_o55, names = c("16-35", "36-55", "56-75"))
title(main = age_title, xlab = age_x, ylab = age_y)
### scatterplot and correlation ###
pairs(test_data) # funktioniert nicht, da zu groß
td_overview <- within(test_data, rm(ID, Date))
td_metabolics <- subset(test_data, select = c(Age, Sex, BMI, Cholesterol, Triglyceride, Glucose))
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y, use = "pairwise.complete.obs", method = "pearson"), digits=2)
txt <- paste0("R = ", r)
text(0.5, 0.5, txt, cex = 1.5)
}
mypanel <- function(x, y){
points(x, y, pch = 20)
}
pairs(td_overview,
lower.panel = mypanel,
upper.panel = panel.cor)
pairs(td_metabolics,
lower.panel = mypanel,
upper.panel = panel.cor)
### import packages ###
library(psych)
### import data ###
setwd("<your workingdirectory>")
### Overview and measures by factor###
table(iris$Species) # observation numbers by factor
tapply(iris$Sepal.Length, iris$Species, summary)
tapply(iris$Sepal.Length, iris$Species, sd)
tapply(iris$Sepal.Length, iris$Species, IQR)
#### modality and normality ###
input_data <- iris$Sepal.Length # change input data here
input_title <- "Sepal length"
input_x <- "Sepal length"
input_y <- "Sepal length"
{hist(input_data, freq=FALSE, main = NULL, xlab = NULL, ylab = NULL) # histogram
lines(density(input_data, na.rm = T), lwd=2) # histogram mit density kurve
lines(density(input_data,adjust=1.5, na.rm = T),col=2,lwd=2) # Doppelte Bandbreite
title(input_title, xlab = input_x)}
plot(ecdf(input_data), main = input_title) # ecdf plot
{qqnorm(input_data, main = input_title) # qq-plot auf Normalverteilung
qqline(input_data, col = 2)} # linie der erwarteten werte aus qq
shapiro.test(input_data) # test for normality (unimodal data only)
boxplot(Sepal.Length ~ Species, data = iris) # unimodal data only
title(main = "Iris", xlab = "Species", ylab = "Length")
### by age ###
input_u35 <- age_under35$BMI
input_u55 <- age_under55$BMI
pairs(dplyr::select_if(working_data, is.numeric))
pairs(dplyr::select_if(t_lipid_data, is.numeric))
## check for correlations between lipids
psych::cor.plot(dplyr::select_if(t_lipid_data, is.numeric))
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y, use = "pairwise.complete.obs", method = "pearson"), digits=2)
txt <- paste0("R = ", r)
text(0.5, 0.5, txt, cex = 1.5)
}
mypanel <- function(x, y){
points(x, y, pch = 20)
}
pairs(td_overview,
lower.panel = mypanel,
upper.panel = panel.cor)
pairs(dplyr::select_if(working_data, is.numeric),
lower.panel = mypanel,
upper.panel = panel.cor)
pairs(dplyr::select_if(t_lipid_data, is.numeric),
lower.panel = mypanel,
upper.panel = panel.cor)
## test for correlation
correlation_plot <- function(input_df, method){
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y, use = "pairwise.complete.obs", method = method), digits=2)
txt <- paste0("R = ", r)
text(0.5, 0.5, txt, cex = 1.5)
}
mypanel <- function(x, y){
points(x, y, pch = 20)
}
pairs(dplyr::select_if(input_df, is.numeric),
lower.panel = mypanel,
upper.panel = panel.cor)
}
correlation_plot(working_data, "pearson")
## test for correlation
correlation_plot <- function(input_df, method = "pearson"){
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y, use = "pairwise.complete.obs", method = method), digits=2)
txt <- paste0("R = ", r)
text(0.5, 0.5, txt, cex = 1.5)
}
mypanel <- function(x, y){
points(x, y, pch = 20)
}
pairs(dplyr::select_if(input_df, is.numeric),
lower.panel = mypanel,
upper.panel = panel.cor)
}
correlation_plot(working_data, "pearson")
pdf(paste(plot_name, "_correlation", ".pdf", sep = ""))
correlation_plot(t_lipid_data, "pearson")
dev.off()
### plots
## paralell plot
MASS::parcoord(dplyr::select_if(input_df, is.numeric))
### plots
## paralell plot
MASS::parcoord(dplyr::select_if(working_data, is.numeric))
## load & transform data
lipid_data <- read.csv(input_path, sep = ",", dec = ".", header = TRUE) #read data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- read_transpose(lipid_data)
### Data handeling
## read and transpose data
read_transpose <- function(input_df){
t_input_df <- data.table::transpose(as.data.table(input_df), make.names = 1)
t_input_df <- as.data.frame(t_input_df)
row.names(t_input_df) <- colnames(input_df[-1])
t_input_df
}
t_lipid_data <- read_transpose(lipid_data)
t_test_data <- read_transpose(test_data)
t_lipid_data
working_data <- t_test_data
working_data
### plots
## paralell plot
MASS::parcoord(dplyr::select_if(test_data, is.numeric))
### plots
## paralell plot
MASS::parcoord(dplyr::select_if(test_data, is.numeric))
### plots
## paralell plot
MASS::parcoord(dplyr::select_if(lipid_data, is.numeric))
lipid_data$X
### plots
## paralell plot
mycolors <- colors()[as.numeric(lipid_data$X)*11]
MASS::parcoord(dplyr::select_if(lipid_data, is.numeric), col = mycolors)
MASS::parcoord(dplyr::select_if(test_data, is.numeric), col = mycolors)
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_test_data <- read_transpose(test_data)
working_data <- t_test_data
t_test_data <- read_transpose(test_data)
working_data <- t_test_data
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_test_data <- read_transpose(test_data)
MASS::parcoord(dplyr::select_if(t_test_data, is.numeric), col = mycolors)
t_test_data <- read_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
test_data <- read.csv(test_path, sep = ",", dec = ".", header = TRUE)
t_lipid_data <- read_transpose(lipid_data)
t_test_data <- read_transpose(test_data)
working_data <- t_test_data
working_data <- SID_to_metadata(working_data)
### plots
## paralell plot
mycolors <- colors()[as.numeric(working_data$treatment)*11]
MASS::parcoord(dplyr::select_if(working_data, is.numeric), col = mycolors)
