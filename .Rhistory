}
######### Data transformation #####################
{
### log2
log_meat <- log2(select_if(target_lipids, is.numeric))
log_meat <- cbind(select_if(target_lipids, is.character), select_if(target_lipids, is.factor), log_meat)
lipid_list <- log_meat
#### remove columns where all values are missing
impute_meat <- lipid_list[, which(colMeans(!is.na(lipid_list)) > 0.8)]
impute_meat <- as.matrix(select_if(impute_meat, is.numeric))
norm_lipids <- impute_meat
#### perform missing data imputation
meat_imputed <- as.data.frame(impute.QRILC(impute_meat, tune.sigma = 1)[[1]])
# meat_imputed <- as.data.frame(impute.MinDet(impute_meat))
### normalize
# meat_imputed <- norm_lipids <- med_normalize(meat_imputed)
meat_imputed <- cbind(lipid_list[, 1:6], meat_imputed)
meat_imputed <- droplevels(meat_imputed) # remove unused levels from factors
#### calculate the means for the replicates
meat_groups <- generate_categorical_table(meat_imputed$Group)
meat_numeric <- meat_imputed
meat_numeric$Group <- as.numeric(meat_numeric$Group)
meat_by_replicate <- calc_by_replicate(meat_numeric, meat_numeric$Biol_rep, mean)
lipid_list <- paste_catecorical_variable(meat_by_replicate, ncol(meat_by_replicate), meat_groups)
colnames(lipid_list)[1] <- "Bio_replicate"
lipid_list$Sample <- sub("\\_.*", "", lipid_list$Bio_replicate)
}
write.csv(file = paste(data_dir, "/", project, "_data_imputed.csv", sep = ""), x = lipid_list)
########### Get lipid information #############
{
lipids <- colnames(select_if(lipid_list, is.numeric))
lipid_class <- sub("\\ .*","", lipids)
lipid_class <- sub(".*\\-", "", lipid_class)
my_sub <- sub(".*\\(", "", lipids)
lipid_Species <- sub("\\-.*", "", my_sub)
lipid_Species <- sub("\\).*", "", lipid_Species)
fatty_acyls <- sub(".*\\-", "", my_sub)
fatty_acyls <- sub("\\).*", "", fatty_acyls)
fatty_acyls <- sub(".*e.*", NA, fatty_acyls)
fatty_acyls <- ifelse(is.na(fatty_acyls), lipid_Species, fatty_acyls)
alkenyl_ether <- grepl("P", fatty_acyls)
lipid_species <- paste(lipid_class, lipid_Species)
fatty_acyls <- paste(lipid_class, fatty_acyls)
saturated_bonds <- as.numeric(sub(".*\\:", "", lipid_species))
is_pufa <- saturated_bonds >= 2
lipid_meta <- data.frame(lipidID = lipids,
lipidClass = lipid_class,
lipidSpecies = lipid_Species,
fattyAcyls = fatty_acyls,
PUFA = is_pufa,
ether = alkenyl_ether)
class_table <- as.data.frame(table(lipid_class))
species_table <- as.data.frame(table(sub(".*\\ ", "", lipid_meta$lipidSpecies)))
alcyl_table <- as.data.frame(table(sub(".*\\ ", "", lipid_meta$fattyAcyls)))
table(is_pufa)
class_plot <- ggplot(data = lipid_meta) +
geom_mosaic(aes(x = product(lipidClass), fill=lipidClass)) +
scale_fill_viridis_d(alpha = 1) +
labs(x="Lipid class", y = NULL, title='Lipid classes') +
theme(axis.text = element_text(family = "AvantGarde"),
legend.position = "bottom", legend.title = element_blank())
pufa_plot <- ggplot(data = lipid_meta) +
geom_mosaic(aes(x = product(PUFA), fill=PUFA)) +
scale_fill_viridis_d(name = "", labels = c("no PUFA", "PUFA")) +
labs(x="PUFA", y = NULL, title='Lipids with at least one PUFA') +
theme(legend.position = "bottom", legend.title = element_blank())
freq_plot <- ggarrange(plotlist = list(class_plot, pufa_plot),
ncol = 2,
nrow = 1,
align = "h",
widths = c(0.9, 0.9),
common.legend = FALSE,
legend = "bottom",
labels = c("A", "B"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(filename = paste(plot_path, "Lipid_frequencies.png", sep = "/"),
plot = freq_plot,
device = "png",
width = 10,
height = 5
)
}
short_lipid_names <- paste(lipid_meta$fattyAcyls, " (", rowid(lipid_meta$fattyAcyls), ")", sep = "")
colnames(lipid_list) <- c("replicate", short_lipid_names, "group", "sample")
short_lipid_names <- paste(lipid_meta$fattyAcyls, " (", rowid(lipid_meta$fattyAcyls), ")", sep = "")
colnames(lipid_list) <- c("replicate", short_lipid_names, "group", "sample")
lipid_list
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(tibble) # data frame manipulation
source("R/lipidome_comparison_read_TF.R")
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import TF data #############################
lipid_list <- read.csv(lipid_list_path, sep = ",", dec = ".", header = TRUE)
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
lipid_list <- subset(lipid_list, select = c(Compound, RT, Type, Filename, Status, Area))
lipid_list <- subset(lipid_list, Status == "Processed")
lipid_list[lipid_list=='N/F'] <- NA
lipid_list$Area <- as.numeric(as.character(lipid_list$Area))
target_lipids <- subset(lipid_list, Type == "Target Compound")
lipid_standards <- subset(lipid_list, Type == "Internal Standard")
target_lipids <- flip_df(target_lipids)
lipid_standards <- flip_df(lipid_standards)
######## get sample information ############################
target_lipids$SID <- sub(".*probe","sample", target_lipids$SID)
target_lipids$SID <- sub("\\.*pos2","2", target_lipids$SID)
target_lipids$SID <- sub("\\.*pos","1", target_lipids$SID)
target_lipids <- subset(target_lipids, str_detect(target_lipids$SID, "sample") == TRUE)
meat_AS <- target_lipids$SID[str_detect(target_lipids$SID, "AS") == TRUE]
target_lipids$SID[str_detect(target_lipids$SID, "AS") == TRUE] <- sub(".*sample","AS_sample", meat_AS)
meat_N <- target_lipids$SID[str_detect(target_lipids$SID, "AS") == FALSE]
target_lipids$SID[str_detect(target_lipids$SID, "AS") == FALSE] <- sub(".*sample","N_sample", meat_N)
target_lipids$SID <- str_remove(target_lipids$SID, "_AS")
meta_info <- read.table(text = target_lipids$SID, sep = "_")
colnames(meta_info) <- c("Treatment", "Sample_nr", "Biol_rep", "Tech_rep")
meta_info$Biol_rep <- paste(meta_info$Sample_nr, meta_info$Biol_rep, sep = "_")
meta_info$Tech_rep <- paste(meta_info$Biol_rep, meta_info$Tech_rep, sep = "_")
target_lipids <- cbind(target_lipids$SID, meta_info, target_lipids[, -1])
target_lipids <- droplevels(target_lipids)
map <- data.frame(Sample_nr=annotation_data$Sample,
Group=annotation_data$Meat.type)
target_lipids <- left_join(target_lipids, map, by="Sample_nr")
write.csv(x = target_lipids, paste(data_dir, "/", project, "_condensed_data.csv", sep = ""))
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(crmn)
library(impute)
library(imputeLCMD)
library(tibble) # data frame manipulation
library(tidyverse)
source("R/lipidome_comparison_dataTransformaions.R")
# source("R/lipidome_comparison_EDA.R")
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
######### Load condensed data #####################
condensed_data <- read.csv(paste(data_dir, "/", project, "_condensed_data.csv", sep = ""), row.names = 1)
colnames(condensed_data) <- unlist(read.csv(paste(data_dir, "/", project, "_condensed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
annotation_data <- read.csv(annotation_path)
######### Log 2 transformation ####################
log2_data <- log2(dplyr::select_if(condensed_data, is.numeric))
log2_data <- cbind(dplyr::select_if(condensed_data, is.character),
dplyr::select_if(condensed_data, is.factor),
log2_data)
######### Remove columns with >20% missing values ###
log2_data <- log2_data[, which(colMeans(!is.na(log2_data)) > 0.8)]
log2_data <- as.matrix(dplyr::select_if(log2_data, is.numeric))
######### Data imputation ###########################
imputed_data <- as.data.frame(impute.QRILC(log2_data, tune.sigma = 1)[[1]])
######### Normaization ##############################
# normalized_data <- med_normalize(imputed_data)
# numeric_data <- normalized_data
### no normalization
numeric_data <- imputed_data
#### calculate the means for the replicates
data_groups <- generate_categorical_table(condensed_data$Group)
complete_data <- calc_by_replicate(numeric_data, condensed_data$Biol_rep, mean)
colnames(complete_data)[1] <- "Replicate"
complete_data$Sample <- sub("\\_.*", "", complete_data$Replicate)
map <- data.frame(Sample=annotation_data$Sample,
Group=annotation_data$Meat.type)
complete_data <- dplyr::left_join(complete_data, map, by="Sample")
write.csv(file = paste(data_dir, "/", project, "_complete_data.csv", sep = ""), x = complete_data)
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(tibble) # data frame manipulation
library(tidyverse)
library(ggplot2)#, # plots
library(viridis) # colorblind save color schemes
library(ggpubr) # multiple plots on one page
library(ggmosaic)
source("R/lipidome_comparison_dataTransformaions.R")
# source("R/lipidome_comparison_EDA.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
########### Read imputed data #############
complete_data <- read.csv(paste(data_dir, "/", project, "_complete_data.csv", sep = ""), row.names = 1)
colnames(complete_data) <- unlist(read.csv(paste(data_dir, "/", project, "_complete_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipids <- colnames(dplyr::select_if(complete_data, is.numeric))
########### Get lipid class ###############
lipid_class <- sub("\\ .*","", lipids)
lipid_class <- sub(".*\\-", "", lipid_class)
########### Get lipid species #############
no_class <- sub(".*\\(", "", lipids)
lipid_species <- sub("\\-.*", "", no_class)
lipid_species <- sub("\\).*", "", lipid_species)
########### Get fatty acyl chains #########
fatty_acyls <- sub(".*\\-", "", no_class)
fatty_acyls <- sub("\\).*", "", fatty_acyls)
fatty_acyls <- sub(".*e.*", NA, fatty_acyls)
fatty_acyls <- ifelse(is.na(fatty_acyls), lipid_species, fatty_acyls)
fatty_acyls <- sub("P", "P-", fatty_acyls)
fatty_acyls <- sub("O", "O-", fatty_acyls)
########## Get ether bonds ################
alkenyl_ether <- grepl("P|O", fatty_acyls)
########## Get total chain length #########
total_chain_length <- as.numeric(sub("\\:.*", "", lipid_species))
########## Get total number of unsaturated bonds ###
unsaturated_bonds <- as.numeric(sub(".*\\:", "", lipid_species))
is_pufa <- unsaturated_bonds >= 2 # check if lipid contains >= 1 PUFA (chek for two MUFA manually)
########## Data frame with lipid information ###
lipid_information <- data.frame(lipidID = lipids,
lipidClass = lipid_class,
totalChainLength = total_chain_length,
unsaturation = unsaturated_bonds,
lipidSpecies = paste(lipid_class, lipid_species),
fattyAcyls = paste(lipid_class, fatty_acyls),
PUFA = is_pufa,
ether = alkenyl_ether)
######### Plot lipid information #########
class_table <- as.data.frame(table(lipid_class))
species_table <- as.data.frame(table(sub(".*\\ ", "", lipid_information$lipidSpecies)))
alcyl_table <- as.data.frame(table(sub(".*\\ ", "", lipid_information$fattyAcyls)))
class_plot <- ggplot(data = lipid_information) +
geom_mosaic(aes(x = product(lipidClass), fill=lipidClass)) +
scale_fill_viridis_d(alpha = 1) +
labs(x = "lipid class", y = NULL, title='Lipid classes') +
theme(axis.text.x=element_text(angle=90), #
axis.text.y = element_blank(),
legend.position = "bottom",
legend.title = element_blank())
pufa_plot <- ggplot(data = lipid_information) +
geom_mosaic(aes(x = product(PUFA), fill=PUFA)) +
scale_fill_viridis_d(name = "", labels = c("no PUFA", "PUFA")) +
labs(x=NULL, y = NULL, title='Lipids with at least one PUFA') +
theme(legend.position = "bottom",
axis.text.y = element_blank(),
legend.title = element_blank())
freq_plot <- ggpubr::ggarrange(plotlist = list(class_plot, pufa_plot),
ncol = 2,
nrow = 1,
align = "h",
widths = c(0.9, 0.9),
common.legend = FALSE,
legend = "bottom",
labels = c("A", "B"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(filename = paste(plot_path, "Lipid_frequencies.png", sep = "/"),
plot = freq_plot,
device = "png",
width = 10,
height = 5
)
####### Rename data in LIPID MAPS nomenclature ####
short_lipid_names <- paste(lipid_information$fattyAcyls, " (", rowid(lipid_information$fattyAcyls), ")", sep = "")
colnames(complete_data) <- c(colnames(complete_data)[1],
short_lipid_names,
colnames(complete_data)[(ncol(complete_data)-1):ncol(complete_data)])
write.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), x = complete_data)
write.csv(file = paste(data_dir, "/", project, "_lipid_information.csv", sep = ""), x = lipid_information)
library(tidyverse)
library(lipidr)
source("R/lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
### change data type to lipidomics experiment format ###
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$Replicate
lipidr_matrix
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- add_sample_annotation(lipidr_experiment, annotation_df)
plot_samples(lipidr_experiment,
type = "tic",
log = TRUE)
plot_molecules(lipidr_experiment,
"sd")
plot_lipidclass(lipidr_experiment, "boxplot")
lipidr_norm <- normalize_pqn(lipidr_experiment,
measure = "Area",
log = TRUE)
library(tidyverse)
library(lipidr)
source("R/lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
### change data type to lipidomics experiment format ###
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$Replicate
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- lipidr::as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- lipidr::add_sample_annotation(lipidr_experiment, annotation_df)
lipidr::plot_samples(lipidr_experiment,
type = "tic",
log = TRUE)
lipidr::plot_molecules(lipidr_experiment,
"sd")
lipidr::plot_lipidclass(lipidr_experiment, "boxplot")
lipidr::plot_samples(lipidr_norm, "boxplot")
lipidr::lipidr_beef <- lipidr_experiment[, lipidr_experiment$Group == "beef"]
lipidr::lipidr_beef <- lipidr_experiment[, lipidr_experiment$Group == "beef"]
lipidr_beef <- lipidr_experiment[, lipidr_experiment$Group == "beef"]
de_results <- lipidr::de_analysis( data=lipidr_beef,
group_col = "Nutrition",
stall - grazing,
measure="Area")
lipidr_beef
library(lipidr)
library(dplyr)
library(fgsea)
source("lipidome_comparison_hypothesis_testing.R")
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$Replicate
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- add_sample_annotation(lipidr_experiment, annotation_df)
plot_samples(lipidr_experiment,
type = "tic",
log = TRUE)
plot_molecules(lipidr_experiment,
"sd")
plot_lipidclass(lipidr_experiment, "boxplot")
lipidr_norm <- normalize_pqn(lipidr_experiment,
measure = "Area",
log = TRUE)
plot_samples(lipidr_norm, "boxplot")
lipidr_beef <- lipidr_norm[, lipidr_norm$Group == "beef"]
pca_results <- mva(lipidr_experiment,
measure = "Area",
method = "PCA")
plot_mva(pca_results, color_by = "Group", components = c(1, 2)) +
theme_minimal() +
scale_color_viridis_d() +
scale_fill_viridis_d()
oplsda_results <- mva(lipidr_beef,
method = "OPLS-DA",
group_col = "Nutrition",
groups = c("grazing", "stall"))
plot_mva(oplsda_results, color_by="Nutrition") +
theme_minimal() +
scale_color_viridis_d() +
scale_fill_viridis_d()
lipidr_experiment
de_results = de_analysis(
data=lipidr_beef,
group_col = "Nutrition",
stall - grazing,
measure="Area"
)
head(de_results)
plot_results_volcano(de_results, show.labels = T) +
scale_color_viridis_d()
vp <- volcano_plot(volcano_df = de_results, foldchange_col = de_results$logFC, significance_col = de_results$adj.P.Val)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = vp,
device = "png",
width = 7,
height = 5
)
x <- subset(de_results$Molecule, de_results$adj.P.Val <= 0.05)
enrich_results <- lsea(de_results, rank.by = "logFC")
sig_lipi <- significant_lipidsets(enrich_results)
plot_class_enrichment(de_results, significant_lipidsets(enrich_results))
sig_lipi <- sub(".*_", "", sig_lipi$`stall - grazing`)
lc <- ggplot(data = de_results) +
geom_boxplot(aes(x = Class, y = logFC, fill = is.element(de_results$Class, sig_lipi))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by lipid classes", y = "log2FC", x = "lipid class")
tc <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cl), y = logFC, fill = is.element(de_results$total_cl, sig_lipi))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by total chain length", y = "log2FC", x = "total chain length")
tus <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cs), y = logFC, fill = is.element(de_results$total_cs, sig_lipi))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by unsaturated bonds", y = "log2FC", x = "total unsaturated bonds")
mylist <- list(lc, tc, tus)
lsea <- ggarrange(plotlist = mylist, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom",
labels = c("(A)", "(B)", "(C)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(filename = paste(plot_path, "lsea.png", sep = "/"), plot = lsea, device = "png",
width = 15, height = 5)
library(lipidr)
library(dplyr)
library(fgsea)
source("lipidome_comparison_hypothesis_testing.R")
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
lipidr_matrix <- t(select_if(lipidr_list, is.numeric))
colnames(lipidr_matrix) <- lipidr_list$Replicate
annotation_df <- subset(lipidr_list, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- add_sample_annotation(lipidr_experiment, annotation_df)
lipidr_norm <- normalize_pqn(lipidr_experiment,
measure = "Area",
log = TRUE)
library(lipidr)
library(dplyr)
library(fgsea)
source("lipidome_comparison_hypothesis_testing.R")
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
library(lipidr)
library(dplyr)
library(fgsea)
source("lipidome_comparison_hypothesis_testing.R")
