library(scales) # scale opacity of filling (alpha)
library(ggrepel)
library(factoextra)
library(ggfortify) # biplot with ggplot
library(heatmaply) # interactive heatmap
library(gplots) # heatmap
library(plotly) # interactive heatmap
# library(psych) # for correlation plot
# library(gridExtra)
# library(devtools)
# library(dendextend)
# library(limma) # hypothesis testing
source("lipidome_comparison_dataTransformaions.R")
source("lipidome_comparison_EDA.R")
source("lipidome_comparison_pca.R")
source("lipidome_comparison_clustering.R")
source("lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
# axis.title = element_text(size = 10, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
## set variables
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
test_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/Probe-Datensatz_lisa.csv"
meat_data_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
plot_name <- paste(plot_path, "/meat_data", sep = "")
## meat data
### data processing
meat_data <- read.csv(meat_data_path, sep = ",", dec = ".", header = TRUE)
meat_data <- subset(meat_data, select = c(Compound, Type, Filename, Status, Group, Area))
meat_data <- subset(meat_data, Status == "Processed")
meat_data[meat_data==''] <- NA
meat_data[meat_data=='N/F'] <- NA
meat_data$Area <- as.numeric(meat_data$Area)
meat_target <- subset(meat_data, Type == "Target Compound")
meat_standard <- subset(meat_data, Type == "Internal Standard")
meat_target <- flip_df(meat_target)
meat_target <- subset(meat_target, !is.na(Group))
meat_target$SID <- sub(".*probe","sample", meat_target$SID)
meat_target$SID <- sub("\\.*pos2","2", meat_target$SID)
meat_target$SID <- sub("\\.*pos","1", meat_target$SID)
meat_AS <- meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE]
meat_target$SID[str_detect(meat_target$SID, "AS") == TRUE] <- sub(".*sample","AS_sample", meat_AS)
meat_N <- meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE]
meat_target$SID[str_detect(meat_target$SID, "AS") == FALSE] <- sub(".*sample","N_sample", meat_N)
meat_target$SID <- str_remove(meat_target$SID, "_AS")
meta_info <- read.table(text = meat_target$SID, sep = "_")
colnames(meta_info) <- c("Treatment", "Sample_nr", "Biol_rep", "Tech_rep")
meta_info$Biol_rep <- paste(meta_info$Sample_nr, meta_info$Biol_rep, sep = "_")
meta_info$Tech_rep <- paste(meta_info$Biol_rep, meta_info$Tech_rep, sep = "_")
meat_target <- cbind(meat_target$SID, meta_info, meat_target[, -1])
meat_target <- droplevels(meat_target)
levels(meat_target$Group)[levels(meat_target$Group) == "fleisch"] <- "meat"
levels(meat_target$Group)[levels(meat_target$Group) == "wild"] <- "game"
levels(meat_target$Group)[levels(meat_target$Group) == "FISCH"] <- "fish"
colnames(meat_target) <- c("SID", colnames(meat_target[-1]))
meat_N <- subset(meat_target, Treatment == "N")
meat_AS <- subset(meat_target, Treatment == "AS")
levels(meat_N$Group)
## Exploratory data analysis
### impute missing values #todo find option to avoid imputation of negative values
#### remove columns where all values are missing
impute_meat <- meat_N[, which(colMeans(!is.na(meat_N)) > 0.8)]
impute_meat <- as.matrix(select_if(impute_meat, is.numeric))
#### perform missing data imputation
meat_QRILC <- impute.QRILC(impute_meat, tune.sigma = 1)
# meat_MinDet <- impute.MinDet(impute_meat)
# meat_imputed <- meat_MinDet
meat_imputed <- as.data.frame(meat_QRILC[[1]])
meat_imputed <- cbind(meat_N[, 1:6], meat_imputed)
meat_imputed <- droplevels(meat_imputed) # remove unused levels from factors
#### calculate the means for the replicates
{
meat_groups <- generate_categorical_table(meat_imputed$Group)
meat_treatment <- generate_categorical_table(meat_imputed$Treatment)
meat_numeric <- meat_imputed
meat_numeric$Group <- as.numeric(meat_numeric$Group)
meat_biol <- calc_by_replicate(meat_numeric, meat_numeric$Sample_nr, mean)
meat_tech <- calc_by_replicate(meat_numeric, meat_numeric$Biol_rep, mean)
nmb <- paste_catecorical_variable(meat_biol, 2, meat_groups)
nmt <- paste_catecorical_variable(meat_tech, 2, meat_groups)
}
### graphical exploratory data analysis
# qqplot_by_factor(meat_imputed, "Group", out_path = plot_name)
# histogram_by_factor(meat_imputed, "Group", out_path = plot_name)
# boxplot_by_factor(meat_imputed, "Group", out_path = plot_name)
#
# parallel_plot(meat_imputed, meat_imputed$Group, out_path = plot_name)
# meat_spider <- calc_by_replicate(meat_imputed, meat_imputed$Group, mean)
# spider_chart(meat_spider, legend_lab = meat_spider$Group.1, out_path = plot_name)
### test for normality
meat_normality <- shapiro_by_factor(meat_imputed, meat_imputed$Group)
### test for correlation
meat_correlation <- cor(select_if(meat_imputed, is.numeric), method = "spearman")
correlation_heatmap(meat_imputed, interactive = TRUE, out_path = plot_name)
### PCA
meat_pca <- prcomp(select_if(meat_imputed, is.numeric))
meat_pca_var <- meat_pca$sdev ^ 2
prop_var_meat <- round(meat_pca_var / sum(meat_pca_var) * 100, 2)
cum_prop_var_meat <- cumsum(prop_var_meat * 100)
proportion_of_variance_table <- data.frame(Proportion_of_variance = prop_var_meat, Cummulative_proportion_of_variance = cum_prop_var_meat)
scree_base(meat_pca)
scree_factoextra(meat_pca)
biplot_ggplot2(meat_imputed, "Group", loadings = FALSE, ellipse = TRUE)
biplot_factoextra(meat_pca, meat_imputed$Group, ellipse = TRUE)
### Clustering
meat_clust <- data.frame(Group = meat_imputed$Group)
meat_clust <- cbind(meat_clust, select_if(meat_imputed, is.numeric))
rownames(meat_clust) <- meat_imputed$SID
hclust_performance_table(meat_clust)
hclust_performance_plot(meat_clust)
meat_dist <- dist(select_if(meat_clust, is.numeric), method = "manhattan")
meat_hclust <- hclust(meat_dist, method = "average")
hclust_dendrogram(meat_hclust,
labs = paste(meat_imputed$Sample_nr,
meat_clust$Group, sep = "-"),
out_path = plot_name)
# hclust_heatmap(meat_clust,
#                dist_method = "manhattan",
#                hclust_method = "average",
#                row_names = meat_clust$Group,
#                out_path = plot_name)
hclust_heatmap_interactive(meat_clust,
dist_method = "manhattan",
hclust_method = "average",
out_path = "/plots/meat")
### hypothesis testing & volcano plot
# anova
#' One way ANOVA by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
one_way_anova_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
anova_df <- data.frame()
for(i in 2:ncol(numeric_df)){
anova <- aov(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
a <- as.data.frame(unlist(summary(anova)))
a_t <- transpose(a)
colnames(a_t) <- rownames(a)
p_value <- a_t$`Pr(>F)1`
f_value <- a_t$`F value1`
buffer <- cbind(f_value, p_value)
anova_df <- rbind(anova_df, buffer)
}
rownames(anova_df) <- colnames(numeric_df[, -1])
colnames(anova_df) <- c("f_value", "p_value")
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(summary(anova))
}
anova_df
}
x <- one_way_anova_by_col(meat_imputed, "Group")
{ # meat vs fish volcano plot
meat_vs_fish <- subset(meat_imputed, Group == "fish" | Group == "meat")
meat_vs_fish <- droplevels(meat_vs_fish)
p_meat_vs_fish <- one_sample_test_by_col(meat_vs_fish, meat_vs_fish$Group, method = wilcox.test)
adj_meat_vs_fish <- p.adjust(p_meat_vs_fish$p_values, method = "fdr")
fc_meat_vs_fish <- log2_foldchange(meat_vs_fish, meat_vs_fish$Group)
meat_fish_volcano <- data.frame(p_value = p_meat_vs_fish, adj_p_value = adj_meat_vs_fish, log2_foldchange = fc_meat_vs_fish)
meat_fish_volcano <- meat_fish_volcano[complete.cases(meat_fish_volcano),]
volcano_plot(meat_fish_volcano,
foldchange_col = meat_fish_volcano$log2_foldchange,
significance_col = meat_fish_volcano$adj_p_value,
foldchange = 2,
significance = 0.5,
out_path = plot_name)
}
{ # meat vs game volcano plot
meat_vs_game <- subset(meat_imputed, Group == "game" | Group == "meat")
meat_vs_game <- droplevels(meat_vs_game)
p_meat_vs_game <- one_sample_test_by_col(meat_vs_game, meat_vs_game$Group, method = wilcox.test)
adj_meat_vs_game <- p.adjust(p_meat_vs_game$p_values, method = "fdr")
fc_meat_vs_game <- log2_foldchange(meat_vs_game, meat_vs_game$Group)
meat_game_volcano <- data.frame(p_value = p_meat_vs_game, adj_p_value = adj_meat_vs_game, log2_foldchange = fc_meat_vs_game)
meat_game_volcano <- meat_game_volcano[complete.cases(meat_game_volcano),]
volcano_plot(meat_game_volcano,
foldchange_col = meat_game_volcano$log2_foldchange,
significance_col = meat_game_volcano$adj_p_value,
foldchange = 1,
significance = 0.5,
out_path = plot_name)
}
{ # game vs fish volcano plot
game_vs_fish <- subset(meat_imputed, Group == "fish" | Group == "game")
game_vs_fish <- droplevels(game_vs_fish)
p_game_vs_fish <- one_sample_test_by_col(game_vs_fish, game_vs_fish$Group, method = wilcox.test)
adj_game_vs_fish <- p.adjust(p_game_vs_fish$p_values, method = "fdr")
fc_game_vs_fish <- log2_foldchange(game_vs_fish, game_vs_fish$Group)
game_fish_volcano <- data.frame(p_value = p_game_vs_fish, adj_p_value = adj_game_vs_fish, log2_foldchange = fc_game_vs_fish)
game_fish_volcano <- game_fish_volcano[complete.cases(game_fish_volcano),]
volcano_plot(game_fish_volcano,
foldchange_col = game_fish_volcano$log2_foldchange,
significance_col = game_fish_volcano$adj_p_value,
foldchange = 1,
significance = 0.5,
out_path = plot_name)
}
one_way_anova_by_col(iris, "Species")
one_way_anova_by_col(iris, "Species", print_all = TRUE)
#' One way ANOVA by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
one_way_anova_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
anova_df <- data.frame()
for(i in 2:ncol(numeric_df)){
anova <- aov(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
a <- as.data.frame(unlist(summary(anova)))
a_t <- transpose(a)
colnames(a_t) <- rownames(a)
p_value <- a_t$`Pr(>F)1`
f_value <- a_t$`F value1`
buffer <- cbind(f_value, p_value)
anova_df <- rbind(anova_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(summary(anova))
}
}
rownames(anova_df) <- colnames(numeric_df[, -1])
colnames(anova_df) <- c("f_value", "p_value")
anova_df
}
x <- one_way_anova_by_col(meat_imputed, "Group")
one_way_anova_by_col(iris, "Species", print_all = TRUE)
#' One way ANOVA by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
one_way_anova_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
anova_df <- data.frame()
for(i in 2:ncol(numeric_df)){
anova <- aov(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
a <- as.data.frame(unlist(summary(anova)))
a_t <- transpose(a)
colnames(a_t) <- rownames(a)
p_value <- a_t$`Pr(>F)1`
f_value <- a_t$`F value1`
buffer <- cbind(f_value, p_value)
anova_df <- rbind(anova_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(summary(anova))
cat("\n")
}
}
rownames(anova_df) <- colnames(numeric_df[, -1])
colnames(anova_df) <- c("f_value", "p_value")
anova_df
}
one_way_anova_by_col(iris, "Species", print_all = TRUE)
# anova
meat_anova <- one_way_anova_by_col(meat_imputed, "Group")
meat_anova
# anova
meat_anova <- one_way_anova_by_col(meat_imputed, "Group")
meat_anova$p_adj <- p.adjust(meat_anova$p_value, method = "fdr")
meat_anova
meat_significant <- subset(meat_anova, meat_anova$p_value <= 0.05)
meat_significant
meat_significant <- subset(meat_anova, meat_anova$p_adj <= 0.05)
meat_significant
#' One way ANOVA by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame and returns f-statistic and p-value in a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
one_way_anova_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
anova_df <- data.frame()
for(i in 2:ncol(numeric_df)){
anova <- kruskal.test(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
a <- as.data.frame(unlist(summary(anova)))
a_t <- transpose(a)
colnames(a_t) <- rownames(a)
p_value <- a_t$`Pr(>F)1`
f_value <- a_t$`F value1`
buffer <- cbind(f_value, p_value)
anova_df <- rbind(anova_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(summary(anova))
cat("\n")
}
}
rownames(anova_df) <- colnames(numeric_df[, -1])
colnames(anova_df) <- c("f_value", "p_value")
anova_df
}
one_way_anova_by_col(iris, "Species")
#' One way ANOVA by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame and returns f-statistic and p-value in a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
one_way_anova_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
anova_df <- data.frame()
for(i in 2:ncol(numeric_df)){
anova <- aov(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
a <- as.data.frame(unlist(summary(anova)))
a_t <- transpose(a)
colnames(a_t) <- rownames(a)
p_value <- a_t$`Pr(>F)1`
f_value <- a_t$`F value1`
buffer <- cbind(f_value, p_value)
anova_df <- rbind(anova_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(summary(anova))
cat("\n")
}
}
rownames(anova_df) <- colnames(numeric_df[, -1])
colnames(anova_df) <- c("f_value", "p_value")
anova_df
}
one_way_anova_by_col(iris, "Species")
# kruskal-wallis
meat_kruskal <- kruskal.test(meat_imputed$`LPC (16:0)_1` ~ meat_imputed$Group)
meat_kruskal
meat_kruskal$p.value
meat_kruskal$method
meat_kruskal$statistic
meat_kruskal$statistic
meat_kruskal$parameter
meat_kruskal$data.name
meat_kruskal$parameter
typeof(meat_kruskal$parameter)
meat_kruskal$statistic
meat_kruskal$method
meat_kruskal$data.name
meat_kruskal
#' Kruskal.test by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame and returns f-statistic and p-value in a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' one_way_anova_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
kruskal_test_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
kruskal_df <- data.frame()
for(i in 2:ncol(numeric_df)){
kruskal <- kruskal.test(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
statistic <- kruskal$statistic
df <- kruskal$parameter
p <- kruskal$p.value
buffer <- cbind(statistic, df, p_value)
kruskal_df <- rbind(kruskal_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(kruskal)
cat("\n")
}
}
rownames(kruskal_df) <- colnames(numeric_df[, -1])
colnames(kruskal_df) <- c("kruskal-wallis_chi-squared", "df", "p_value")
kruskal_df
}
kruskal_test_by_col(iris, "Species")
one_way_anova_by_col(iris, "Species", print_all = TRUE)
#' Kruskal.test by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame and returns f-statistic and p-value in a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' kruskal_test_by_col(iris, "Species")
#' one_way_anova_by_col(iris, "Species", print_all = TRUE)
kruskal_test_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
kruskal_df <- data.frame()
for(i in 2:ncol(numeric_df)){
kruskal <- kruskal.test(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
statistic <- kruskal$statistic
df <- kruskal$parameter
p <- kruskal$p.value
buffer <- cbind(statistic, df, p_value)
kruskal_df <- rbind(kruskal_df, buffer)
if(print_all){
cat("\n-----\n\n")
cat(colnames(numeric_df)[i])
cat("\n")
print(kruskal)
cat("\n")
}
}
rownames(kruskal_df) <- colnames(numeric_df[, -1])
colnames(kruskal_df) <- c("kruskal-wallis_chi-squared", "df", "p_value")
kruskal_df
}
one_way_anova_by_col(iris, "Species", print_all = TRUE)
kruskal_test_by_col(iris, "Species", print_all = TRUE)
# kruskal-wallis
meat_kruskal <- kruskal_test_by_col(meat_imputed, "Group")
meat_kruskal
kruskal_test_by_col(iris, "Species")
kruskal_test_by_col(iris, "Species", print_all = TRUE)
#' Kruskal.test by column
#'
#' @description `one_way_anova_by_col` performs an ANOVA for each numeric column of a data frame and returns f-statistic and p-value in a data frame.
#' @param input_df data frame. Has multiple columns with numerical variables and at least one column with a factor variable.
#' @param factor_col string. Gives the name of the column, where the groups between which the anova is performed are stored.
#' @param print_all bool. Prints a summary of each anova. Default = FALSE
#' @example
#' kruskal_test_by_col(iris, "Species")
#' kruskal_test_by_col(iris, "Species", print_all = TRUE)
kruskal_test_by_col <- function(input_df, factor_col, print_all = FALSE){
numeric_df <- data.frame(Group = input_df[[factor_col]])
numeric_df <- cbind(numeric_df, select_if(input_df, is.numeric))
kruskal_df <- data.frame()
for(i in 2:ncol(numeric_df)){
kruskal <- kruskal.test(numeric_df[[colnames(numeric_df)[i]]] ~ numeric_df$Group,
data = numeric_df)
statistic <- kruskal$statistic
df <- kruskal$parameter
p_value <- kruskal$p.value
buffer <- cbind(statistic, df, p_value)
kruskal_df <- rbind(kruskal_df, buffer)
# if(print_all){
#   cat("\n-----\n\n")
#   cat(colnames(numeric_df)[i])
#   cat("\n")
#   print(kruskal)
#   cat("\n")
# }
}
rownames(kruskal_df) <- colnames(numeric_df[, -1])
colnames(kruskal_df) <- c("kruskal-wallis_chi-squared", "df", "p_value")
kruskal_df
}
kruskal_test_by_col(iris, "Species")
# kruskal-wallis
meat_kruskal <- kruskal_test_by_col(meat_imputed, "Group")
meat_kruskal
meat_kruskal$p_adj <- p.adjust(meat_kruskal, meat_kruskal$p_value, method = "fdr")
# kruskal-wallis
meat_kruskal <- kruskal_test_by_col(meat_imputed, "Group")
meat_kruskal$p_adj <- p.adjust(meat_kruskal$p_value, method = "fdr")
# kruskal-wallis
meat_kruskal <- kruskal_test_by_col(meat_imputed, "Group")
meat_kruskal$p_adj <- p.adjust(meat_kruskal$p_value, method = "fdr")
meat_significant_k <- subset(meat_kruskal, meat_kruskal$p_value <= 0.05)
meat_significant_k
meat_significant_k <- subset(meat_kruskal, meat_kruskal$p_adj <= 0.05)
meat_significant_k
