log2_data <- cbind(dplyr::select_if(condensed_data, is.character),
dplyr::select_if(condensed_data, is.factor),
log2_data)
######### Remove columns with >20% missing values ###
log2_data <- log2_data[, which(colMeans(!is.na(log2_data)) > 0.8)]
log2_data <- as.matrix(dplyr::select_if(log2_data, is.numeric))
######### Data imputation ###########################
imputed_data <- as.data.frame(impute.QRILC(log2_data, tune.sigma = 1)[[1]])
######### Normaization ##############################
# normalized_data <- med_normalize(imputed_data)
# numeric_data <- normalized_data
### no normalization
numeric_data <- imputed_data
#### calculate the means for the replicates
data_groups <- generate_categorical_table(condensed_data$Group)
complete_data <- calc_by_replicate(numeric_data, condensed_data$Biol_rep, mean)
colnames(complete_data)[1] <- "Replicate"
complete_data$Sample <- sub("\\_.*", "", complete_data$Replicate)
map <- data.frame(Sample=annotation_data$Sample,
Group=annotation_data$Meat.type)
complete_data <- dplyr::left_join(complete_data, map, by="Sample")
write.csv(file = paste(data_dir, "/", project, "_complete_data.csv", sep = ""), x = complete_data)
library(imputeLCMD)
install.packages("imputeLCMD")
library(imputeLCMD)
### load packages
library(dplyr) # select part of data
library(stringr) # count separators
library(data.table) # transpose data frame
library(crmn)
library(impute)
library(imputeLCMD)
library(tibble) # data frame manipulation
library(tidyverse)
source("R/lipidome_comparison_dataTransformaions.R")
# source("R/lipidome_comparison_EDA.R")
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
plot_path <- paste(working_directory, "/plots", sep = "")
######### Load condensed data #####################
condensed_data <- read.csv(paste(data_dir, "/", project, "_condensed_data.csv", sep = ""), row.names = 1)
colnames(condensed_data) <- unlist(read.csv(paste(data_dir, "/", project, "_condensed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
annotation_data <- read.csv(annotation_path)
######### Log 2 transformation ####################
log2_data <- log2(dplyr::select_if(condensed_data, is.numeric))
log2_data <- cbind(dplyr::select_if(condensed_data, is.character),
dplyr::select_if(condensed_data, is.factor),
log2_data)
######### Remove columns with >20% missing values ###
log2_data <- log2_data[, which(colMeans(!is.na(log2_data)) > 0.8)]
log2_data <- as.matrix(dplyr::select_if(log2_data, is.numeric))
######### Data imputation ###########################
imputed_data <- as.data.frame(impute.QRILC(log2_data, tune.sigma = 1)[[1]])
######### Normaization ##############################
# normalized_data <- med_normalize(imputed_data)
# numeric_data <- normalized_data
### no normalization
numeric_data <- imputed_data
#### calculate the means for the replicates
data_groups <- generate_categorical_table(condensed_data$Group)
complete_data <- calc_by_replicate(numeric_data, condensed_data$Biol_rep, mean)
colnames(complete_data)[1] <- "Replicate"
complete_data$Sample <- sub("\\_.*", "", complete_data$Replicate)
map <- data.frame(Sample=annotation_data$Sample,
Group=annotation_data$Meat.type)
complete_data <- dplyr::left_join(complete_data, map, by="Sample")
write.csv(file = paste(data_dir, "/", project, "_complete_data.csv", sep = ""), x = complete_data)
library(impute)
library(imputeLCMD)
install.packages("imputeLCMD")
library(tidyverse)
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel) # keep labels from overlapping
library(ggfortify) # biplot with ggplot
library(factoextra) # package for multivariate methods
library(FactoMineR) # package for multivariate methods
source("R/lipidome_comparison_visualization.R")
source("R/lipidome_comparison_pca.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
###################### PCA #############################################
lipid_pca <- FactoMineR::PCA(select_if(lipid_data, is.numeric), scale.unit = T, graph = F)
############ get eigenvalues and plot contribution of PCs to variance #####
lipid_eigenvalues <- as.data.frame(factoextra::get_eigenvalue(lipid_pca))
# scree
# eigen_plot <- plot_pc_variance(lipid_eigenvalues[1:10,],
#                                x = seq(1:10),
#                                y = lipid_eigenvalues$eigenvalue[1:10],
#                                title = "Eigenvalue",
#                                ylab = "eigenvalues")
#
var_plot <- plot_pc_variance(lipid_eigenvalues[1:10,],
x = seq(1:10),
y = lipid_eigenvalues$variance.percent[1:10],
xlab = "principal components",
title = "Variance [%]")
cum_var_plot <- plot_pc_variance(lipid_eigenvalues[1:10,],
x = seq(1:10),
y = lipid_eigenvalues$cumulative.variance.percent[1:10],
title = "Cummulative variance [%]",
ylab = NULL,
xlab = "principal components",
hjust = 1)
scree <- ggpubr::ggarrange(plotlist = list(var_plot, cum_var_plot),
nrow = 1,
ncol = 2,
widths = c(1, 1),
labels = c("(A)", "(B)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde")  )
ggsave(paste(plot_path, "/", project, "_scree.png", sep = ""), scree, device = "png",
height = 5, width = 10)
################# plot sample scores ###############################
lipid_biplot <- biplot_ggplot2(lipid_data,
groups = "Group",
loadings = FALSE,
ellipse = TRUE,
scale = TRUE,
title = "Scores plot of meat data")
ggsave(filename = paste(plot_path, "/", project, "_biplot.png", sep = ""),
plot = lipid_biplot,
device = "png",
height = 5, width = 10)
################# plot variable loadings ##########################
fviz_pca_var(lipid_pca, # factoextra
geom = c("point"),
col.var = "contrib",
gradient.cols = viridis(n = 3, direction = -1),
repel = TRUE)
loadings_plot <- plot_loadings(lipid_pca,
colour = TRUE,
top_loadings = 10,
xlab = "PC1",
ylab = "PC2",
title = "Loadings of meat data")
ggsave(paste(plot_path, "/", project, "_loadings_plot.png", sep = ""),
plot = loadings_plot,
device = "png",
width = 10,
height = 5)
pc1_loadngs_bar <- fviz_contrib(lipid_pca, choice = "var", axes = 1, top = 10,
fill = viridis(n = 1, begin = 0.3), color = viridis(n = 1, begin = 0.3),
title = "Contribution to PC1",
ggtheme = my_theme)
pc2_loadings_bar <- fviz_contrib(lipid_pca, choice = "var", axes = 2, top = 10,
fill = viridis(n = 1, begin = 0.3), color = viridis(n = 1, begin = 0.3),
title = "Contribution to PC2",
ggtheme = my_theme,
linecolor = "black",
xtickslab.rt = 45)
contribution_plot <- ggpubr::ggarrange(plotlist = list(pc1_loadngs_bar, pc2_loadings_bar),
nrow = 1,
ncol = 2,
widths = c(1, 1),
labels = c("A", "B"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(paste(plot_path, "/", project, "_pc_contribution.png", sep = ""),
contribution_plot,
device = "png",
width = 10,
height = 5)
###################### get the most contributional variables ##################
lipid_var <- lipid_pca$var
lipid_contrib <- as.data.frame(lipid_var$contrib)
pc1_contrib_table <- lipid_contrib[order(lipid_contrib$Dim.1, decreasing = TRUE),]
pc1_contrib <- rownames(pc1_contrib_table)[1:10]
pc2_contrib_table <- lipid_contrib[order(lipid_contrib$Dim.2, decreasing = TRUE),]
pc2_contrib <- rownames(pc2_contrib_table)[1:10]
lipid_pca_sub <- subset(lipid_data, select = c("Replicate", "Group", pc1_contrib, pc2_contrib))
pp <- parallel_plot(lipid_pca_sub, lipid_pca_sub$Group, title = "Relative abundances of most contributional lipids")
ggsave(filename = paste(plot_path, "/", project, "_paralellPlot.png", sep = ""), plot = pp,
width = 10,
height = 5)
### load packages
library(tidyverse)
library(viridis) # colorblind save color schemes
library(mixOmics)
library(ggpubr)
source("R/lipidome_comparison_visualization.R")
source("R/lipidome_comparison_plsDA.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data #############################
lipid_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
############ separate numeric data from group data ################
X <- dplyr::select_if(lipid_list, is.numeric)
Y <- lipid_list$Group
summary(Y)
dim(X); length(Y)
########### SPLS-DA without tuning #####
meat_pls <- mixOmics::splsda(X, Y, keepX = c(50,50)) # SPLS-DA without training
meat_pls_wo_training <- plot_pls_scores(meat_pls, title = "PLS-DA of meat")
background <- mixOmics::background.predict(meat_pls, comp.predicted=2, dist = "max.dist")
mixOmics::plotIndiv(meat_pls, comp = 1:2, group = Y,
ind.names = FALSE,
title = "Maximum distance",
legend = TRUE,
background = background,
col = viridis(n = 3),
style = "ggplot2" ,
pch = c(15:17),
cex = 1.5
)
### tuning the SPLS model ###
set.seed(2543) # for reproducibility
list.keepX <- c(5:10, seq(5, 50, 2))
## may take a couple of minuites to run depending on the data
tune_splsda <- mixOmics::tune.splsda(X, Y,
ncomp = 5,
validation = 'Mfold',
folds = 2,            # <= number of observations in the smallest group
progressBar = FALSE,
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, # repeats of crossvalidation
cpus = 2) # faster computation when using the cpu argument
choice.ncomp <- tune_splsda$choice.ncomp$ncomp; choice.ncomp
choice.keepX <- tune_splsda$choice.keepX[1:choice.ncomp]; choice.keepX
plot(tune_splsda, col = viridis(n = 5, alpha = 0.5))
### tuned SPLS-DA model ###
new_splsda <- mixOmics::splsda(X, Y, ncomp = choice.ncomp, keepX = choice.keepX)
### tuned spls-da performance ###
perf_new_splsda <- mixOmics::perf(new_splsda, validation = "Mfold", folds = 2,
progressBar = FALSE, auc = TRUE, nrepeat = 100)
{par(mfrow = c(1, 1),
cex.main = 1.2,
family = "AvantGarde",
col = "grey40",
col.lab = "grey40",
font.main = 1)
plot(perf_new_splsda, col = viridis(n = 3))
title(main = "Performance of tuned PLS-DA")}
## display selected variables
mixOmics::selectVar(new_splsda, comp = 1)$value
mixOmics::selectVar(new_splsda, comp = 2)$value
## roc curve
mixOmics::auc.plsda <- auroc(new_splsda, line.col = viridis(n = 3, alpha = 0.5))
## plot samples in the first two components of PLS-DA
tuned_pls_scores <- plot_pls_scores(new_splsda,
title = "Tuned PLS-DA",
xlab = "component 1",
ylab = "component 2")
ggsave(paste(plot_path, "tuned_pls-da.png", sep ="/" ),
tuned_pls_scores,
device = "png",
width = 10,
height = 5)
## loading weights of selected variables
loadings1 <- mixOmics::plotLoadings(new_splsda,
comp = 1,
title = 'Loadings on comp 1',
contrib = 'max',
method = 'mean',
legend.color = viridis(n = 3),
size.title = 1)
loadings2 <- mixOmics::plotLoadings(new_splsda,
comp = 2,
title = 'Loadings on comp 2',
contrib = 'max',
method = 'mean',
legend.color = viridis(n = 3),
size.title = 1)
lp1 <- ggplot(loadings1, aes(reorder(rownames(loadings1), importance, sum), importance, color = GroupContrib, fill = GroupContrib))+
geom_col() +
coord_flip() +
scale_color_viridis_d(begin = 0.5) +
scale_fill_viridis_d(begin = 0.5) +
labs(title = "Loadings of component 1", x = "feature") +
theme(legend.title = element_blank())
lp2 <- ggplot(loadings2, aes(reorder(rownames(loadings2), importance, sum), importance, color = GroupContrib, fill = GroupContrib))+
geom_col() +
coord_flip() +
scale_color_viridis_d(begin = 1) +
scale_fill_viridis_d(begin = 1) +
labs(title = "Loadings of component 2", x = NULL) +
theme(legend.title = element_blank())
loadings <- ggpubr::ggarrange(lp1, lp2, legend = "right",
labels = c("(A)", "(B)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"), ncol = 2, common.legend = TRUE)
ggsave(paste(plot_path, "pls_da_loadings.png", sep ="/" ),
loadings,
device = "png",
width = 10,
height = 4)
## visualize the abundances of the selected variables
pls_sub1 <- mixOmics::selectVar(new_splsda, comp = 1)$name
pls_sub2 <- mixOmics::selectVar(new_splsda, comp = 2)$name
pls1 <- subset(lipid_list, select = c("Group", pls_sub1))
pls_all <- cbind(pls1, subset(lipid_list, select = c(pls_sub2)))
parallel_plot <- parallel_plot(pls_all, pls_all$Group)
ggsave(paste(plot_path, "pp_pls_da.pbg", sep ="/" ),
parallel_plot,
device = "png",
width = 10,
height = 4)
p_plot <- parallel_plot(pls_all, pls_all$Group)
library(GGally)
p_plot <- parallel_plot(pls_all, pls_all$Group)
ggsave(paste(plot_path, "pp_pls_da.pbg", sep ="/" ),
p_plot,
device = "png",
width = 10,
height = 4)
p_plot <- GGally::parallel_plot(pls_all, pls_all$Group)
p_plot <- parallel_plot(pls_all, pls_all$Group)
ggsave(paste(plot_path, "pp_pls_da.pbg", sep ="/" ),
p_plot,
device = "png",
width = 10,
height = 4)
### load packages
library(tidyverse)
library(viridis) # colorblind save color schemes
library(GGally) # paralell plot
library(fmsb) # spider chart
library(scales) # scale opacity of filling (alpha)
library(ggpubr) # multiple plots on one page
library(ggrepel)
source("R/lipidome_comparison_dataTransformaions.R")
source("R/lipidome_comparison_visualization.R")
source("R/lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
############## import lipid data & subset to two groups #############################
lipid_data <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipid_data) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample=annotation_data$Sample,
Nutrition=annotation_data$Nutrition)
lipid_data <- left_join(lipid_data, map, by="Sample")
beef <- subset(lipid_data, subset = lipid_data$Group == "beef")
beef <- droplevels(beef)
############## Beef univariate ##################################################
p_beef <- one_sample_test_by_col(beef, beef$Nutrition, method = t.test)
adj_beef <- p.adjust(p_beef$p_values, method = "fdr")
fc_beef <- log2_foldchange(beef,
beef$Nutrition,
control_group = "stall",
test_group = "grazing")
beef_volcano <- data.frame(p_value = p_beef, adj_p_value = adj_beef, log2_foldchange = fc_beef)
volcano_plot <- volcano_plot(beef_volcano,
foldchange_col = beef_volcano$log2_foldchange,
significance_col = beef_volcano$adj_p_value,
foldchange = 1,
significance = 0.05)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = volcano_plot,
device = "png",
width = 10,
height = 5
)
library(tidyverse)
library(lipidr)
library(ggpubr)
library(viridis)
library(ggrepel)
source("R/lipidome_comparison_hypothesis_testing.R")
# set ggplot theme
my_theme <- theme_set(
theme_minimal() +
theme(plot.title = element_text(size=12, hjust = 0.5, family="AvantGarde"),
plot.subtitle = element_text(size = 8, hjust = 0.5, family = "AvantGarde", colour = "grey40"),
axis.text.x = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.text.y = element_text(size = 8, colour = "grey40", family="AvantGarde"),
axis.title.x = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
axis.title.y = element_text(size = 10, hjust = 0.5, colour = "grey40", family="AvantGarde"),
legend.text = element_text(size = 8, colour = "grey40", family="AvantGarde"),
legend.title = element_text(size = 10, colour = "grey40", family="AvantGarde"))
)
############### set variables #############################
project <- "meat"
working_directory <- "/home/lisa/FH/Masterarbeit/LipidomeComparison"
setwd(working_directory)
data_dir <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data"
lipid_list_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_fish_final_raw.csv"
annotation_path <- "/home/lisa/FH/Masterarbeit/LipidomeComparison/data/meat_annotation.csv"
data_matrix_path <- paste("/home/lisa/FH/Masterarbeit/LipidomeComparison/data/", project, "_data_matrix.csv", sep = "")
plot_path <- paste(working_directory, "/plots", sep = "")
################### read data ###############
lipidr_list <- read.csv(file = paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), row.names = 1)
colnames(lipidr_list) <- base::unlist(read.csv(paste(data_dir, "/", project, "_renamed_data.csv", sep = ""), header = FALSE)[1, -1], use.names = FALSE)
lipidr_list <- subset(lipidr_list, subset = lipidr_list$Group == "beef")
########### transform to lipidomics experiment data type ################
lipidr_beef <- subset(lipidr_list, lipidr_list$Group == "beef")
droplevels(lipidr_beef)
lipidr_matrix <- t(select_if(lipidr_beef, is.numeric))
colnames(lipidr_matrix) <- lipidr_beef$Replicate
annotation_df <- subset(lipidr_beef, select = c("Replicate", "Sample"))
annotation_data <- read.csv(annotation_path, sep = ",", dec = ".", header = TRUE)
map <- data.frame(Sample = annotation_data$Sample,
Nutrition = annotation_data$Nutrition)
annotation_df <- left_join(annotation_df, map, by = "Sample")
names(annotation_df) <- c("Sample", "ID", "Nutrition")
lipidr_experiment <- as_lipidomics_experiment(lipidr_matrix)
lipidr_experiment <- add_sample_annotation(lipidr_experiment, annotation_df)
############ perform and visualize univariate analysis ##############
de_results = de_analysis(
data=lipidr_experiment,
group_col = "Nutrition",
stall - grazing,
measure="Area")
head(de_results)
vp <- volcano_plot(volcano_df = de_results, foldchange_col = de_results$logFC, significance_col = de_results$adj.P.Val)
ggsave(filename = paste(plot_path, "beef_volcano.png", sep = "/"),
plot = vp,
device = "png",
width = 7,
height = 5
)
subset(de_results$Molecule, de_results$adj.P.Val <= 0.05)
############## lipid set enrichment analysis #####################
enrich_results <- lipidr::lsea(de_results, rank.by = "logFC")
sig_lipids <- lipidr::significant_lipidsets(enrich_results)
sig_lipids <- sub(".*_", "", sig_lipids$`stall - grazing`)
lipidClass <- ggplot(data = de_results) +
geom_boxplot(aes(x = Class, y = logFC, fill = is.element(de_results$Class, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by lipid classes", y = "log2FC", x = "lipid class")
totalChain <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cl), y = logFC, fill = is.element(de_results$total_cl, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by total chain length", y = "log2FC", x = "total chain length")
unsaturatedBonds <- ggplot(data = de_results) +
geom_boxplot(aes(x = as.factor(total_cs), y = logFC, fill = is.element(de_results$total_cs, sig_lipids))) +
scale_fill_manual(name = 'Significant', values = setNames(c(viridis(n = 1, begin = 0.5),'grey90'),c(T, F))) +
labs(title = "Foldchange by unsaturated bonds", y = "log2FC", x = "total unsaturated bonds")
mylist <- list(lipidClass, totalChain, unsaturatedBonds)
lsea <- ggarrange(plotlist = mylist, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom",
labels = c("(A)", "(B)", "(C)"),
font.label = list(size = 10,
color = "grey40",
face = "plain",
family = "AvantGarde"))
ggsave(filename = paste(plot_path, "lsea.png", sep = "/"), plot = lsea, device = "png",
width = 15, height = 5)
